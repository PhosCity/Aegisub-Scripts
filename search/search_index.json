{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is the collection of the Aegisub scripts made by me along with detailed explanation for its usage.</p> <p>Scripts that I've written can broadly be classified into two types: scripts that are in Dependency Control and those that are not. Scripts that are in Dependency Control are those scripts that are ready for broad public usage and those which aren't are either still in development or are not useful enough to be added.</p>"},{"location":"#installing-aegisub-scripts","title":"Installing Aegisub Scripts","text":"<p>The guide to installing both scripts that are available in Dependency Control and those that aren't is explained in this guide</p>"},{"location":"#scriptfeature-request-and-bug-reporting","title":"Script/Feature Request and Bug Reporting","text":"<p>If you want to report bug or ask for a feature to be added in an already existing script or have an idea for a new script that you want to be made, you can reach out in the following places.</p> <ul> <li>Github Issues</li> <li>DM me at discord (<code>PhosCity#4786</code>)</li> <li>I haunt the hallways of GJM fansub discord server pretty regularly.</li> </ul> <p>I can't assure I'll accept all requests but if it's good enough and possible by my knowledge, I'll try to get it made.</p>"},{"location":"ASS2SVG/","title":"ASS2SVG","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p><code>ASS2SVG</code> allows you to convert shape from ass subtitles to svg path that you can open in program like Inkscape and make changes to it. This is a companion script to inkscape-svg2ass, an Inkscape extension that converts svg path to ass shape.</p> <p>Warning</p> <p>This script only works in shapes and not text. This is because of differences in the semantics of how text is rendered in SVG that is very different than ASS. This not only makes the sizes of fonts different but there is also no 3D transformation of text in SVG which makes exporting tags like frx and fry impossible.</p>"},{"location":"ASS2SVG/#usage","title":"Usage","text":"Your browser does not support the video tag.  <ul> <li>Select lines with shapes in Aegisub.</li> <li>Run the script.</li> <li>Navigate to the folder where you want to save the svg and input the filename of the svg.</li> <li>You will find a file exported in that folder with that name.</li> </ul>"},{"location":"ASSFoundation/","title":"Introduction","text":"<p>ASSFoundation, henceforth called assf, is a module that aims to make working with subtitle object efficient. It does most of the heavy lifting so that we can do more with less lines of code in our script. No need to use messy regular expressions, define the types of tags and the nature of their values. No need to reinvent the wheel and write functions to work in subtitle object or write your own module for common things.</p> <p>This guide assumes that you already know how to write Aegisub scripts and know the basics of Moonscript.</p> <p>Here's the very basics:</p> <pre><code>export script_name = \"name of the script\"\nexport script_description = \"description of your script\"\nexport script_version = \"0.0.1\"\nexport script_author = \"you\"\nexport script_namespace = \"namespace of your script\"\n\nDependencyControl = require \"l0.DependencyControl\"\ndepctrl = DependencyControl{\n  feed: \"\",\n  {\n    {\"a-mo.LineCollection\", version: \"1.3.0\", url: \"https://github.com/TypesettingTools/Aegisub-Motion\",\n      feed: \"https://raw.githubusercontent.com/TypesettingTools/Aegisub-Motion/DepCtrl/DependencyControl.json\"},\n    {\"l0.ASSFoundation\", version: \"0.4.0\", url: \"https://github.com/TypesettingTools/ASSFoundation\",\n      feed: \"https://raw.githubusercontent.com/TypesettingTools/ASSFoundation/master/DependencyControl.json\"}\n  }\n}\nLineCollection, ASS = depctrl\\requireModules!\nlogger = depctrl\\getLogger!\n\nfunctionName = (sub, sel, act) -&gt;\n  -- stuff goes here\n\ndepctrl\\registerMacro functionName\n</code></pre> <p>This is the framework that all your scripts will have. Here we import LineCollection and assf and define a function called functionName. This function name is what we register in aegisub in the last line. Everything we do below will go inside the function where <code>--stuff goes here</code> is written. We also define logger for logging purposes but if you don't need to log anything, you can remove that line.</p>"},{"location":"ASSFoundation/#linecollection","title":"LineCollection","text":"<p>LineCollection is actually not a part of assf but almost anything that assf does will act on the line table generated by LineCollection. The line table generated by LineCollection will have all the elements of a normal line table like start_time, actor, end_time etc but in addition, it also adds other elements. Apart from the basic fields of line table, following fields are now available to you.:</p> Fields Meaning Type duration duration of line in ms integer startFrame start frame of a line integer endFrame end frame of a line integer styleRef style table table number number of line in subtitle file integer humanizedNumber number of line as seen in Aegisub integer <p>Some of the methods LineCollection provides to us to modify subtitles are:</p> Method Usage Meaning LineCollection lines = LineCollection sub, sel Add all the selected lines to a variable named <code>lines</code>. It ignores commented lines. replaceLines lines\\replaceLines! Any change you make to <code>lines</code> will be put back to the subtitle deleteLines lines\\deleteLines! Delete all the lines lines\\deleteLines tbl Provide a table of line to delete those lines only insertLines lines\\insertLines! insert lines to subtitle file newLines\\insertLines Insert a new set of lines that you defined called newLines addline lines\\addLine add line to subtitle file <p>You can actually work in the line table generated by LineCollection without using assf as shown in an example below where we change the effect of the line to \"Actor\".</p> <pre><code>functionName = (sub, sel) -&gt;\n  lines = LineCollection sub, sel\n  for line in *lines\n    line.effect = \"Actor\"\n  lines\\replaceLines!\n</code></pre> <p>But we'll use LineCollection alongside assf to get the most out of both of them.</p>"},{"location":"ASSFoundation/#logger","title":"Logger","text":"<p>Logger is a logging module from dependency control that you can use to log messages. If you do not pass log level, default log level is 2. By default, Aegisub's log level is set to 3 which means that the message above 3 wont be seen by end user unless they set the log level higher themself. The script exits after showing message if the log level is below 2.</p> <pre><code>logger\\log \"A simple message inside quotes\"\nlogger\\log 4, \"A simple message inside quotes but with log level 4\"\n\n-- dump is the most useful part of logger as far as debugging goes.\n-- You can pass a table and it'll show you a nice formatted view with all it's keys and values.\nlogger\\dump table\n\n-- With predefined log levels\nlogger\\fatal \"message\"                                                      -- log level 0\nlogger\\error \"message\"                                                      -- log level 1\nlogger\\warn \"message\"                                                       -- log level 2\nlogger\\hint \"message\"                                                       -- log level 3\nlogger\\debug \"message\"                                                      -- log level 4\nlogger\\trace \"message\"                                                      -- log level 5\nlogger\\assert condition, \"Show this message if the condition is false\"      -- log level 1\n</code></pre>"},{"location":"ASSFoundation/#assfoundation","title":"ASSFoundation","text":""},{"location":"ASSFoundation/#name-of-tags-as-understood-by-assf","title":"Name of tags as understood by assf","text":"Tag Assf name \\fscx scale_x \\fscy scale_y \\an align \\frz angle \\fry angle_y \\frx angle_x \\bord outline \\xbord outline_x \\ybord outline_y \\shad shadow \\xshad shadow_x \\yshad shadow_y \\r reset \\pos position \\move move \\org origin \\alpha alpha \\1a alpha1 \\2a alpha2 \\3a alpha3 \\4a alpha4 \\1c color1 \\2c color2 \\3c color3 \\4c color4 \\clip clip_vect \\iclip iclip_vect \\clip clip_rect \\iclip iclip_rect \\p drawing \\be blur_edges \\blur blur \\fax shear_x \\fay shear_y \\b bold \\i italic \\u underline \\s strikeout \\fsp spacing \\fs fontsize \\fn fontname \\k k_fill \\kf k_sweep \\ko k_bord \\q wrapstyle \\fad fade_simple \\fade fade \\t transform"},{"location":"ASSFoundation/#loop-through-all-selected-lines","title":"Loop through all selected lines","text":"<pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\n</code></pre> <p>This loops through all selected lines. If the number of lines is 0, exits out. Here <code>line</code> is the line table for the current line and <code>i</code> is the index of line i.e. the first selected line has index 1 and second has index 2 and so on.</p>"},{"location":"ASSFoundation/#line-data","title":"Line Data","text":"<p>This creates a line data for each line. Everything assf does will be acted on this line data.</p> <pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\n  data = ASS\\parse line\n</code></pre>"},{"location":"ASSFoundation/#sections","title":"Sections","text":"<p>In assf, a single line can have four different types of sections. Their names make them self-explanatory so I'll only list them.</p> <ol> <li>ASS.Section.Text</li> <li>ASS.Section.Tag</li> <li>ASS.Section.Drawing</li> <li>ASS.Section.Comment</li> </ol>"},{"location":"ASSFoundation/#work-in-different-sections-of-a-line","title":"Work in different sections of a line","text":"<pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\nlines\\runCallback (lines, line, i) -&gt;\n  data = ASS\\parse line\n  data\\callback (section) -&gt;\n    if section.class == ASS.Section.Tag\n      -- do stuff to tags\n    elseif section.class == ASS.Section.Text\n      -- do stuff to text\n    elseif section.class == ASS.Section.Comment\n      -- do stuff to comment\n    elseif section.class == ASS.Section.Drawing\n      -- do stuff to drawing\n</code></pre> <p>If you care, you can download this example script and try this in different types of lines (with/without tags, comments, drawings, text, gbc etc.) to get a idea of how assf treats different sections of a line.</p> <p>If you want to work in an individual section, you can do the following:</p> <p>Example: Working with only text of line</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  --obtain the text\n  text = section.value\n  -- do stuff to text of line\n), ASS.Section.Text\n</code></pre> <p>Example: Working with only tags of line</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  for tags in *section\\getTags!\n    -- do stuff to tags of line\n), ASS.Section.Tag\n</code></pre>"},{"location":"ASSFoundation/#modifying-text","title":"Modifying text","text":""},{"location":"ASSFoundation/#change-whole-text","title":"Change whole text","text":"<pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  section.value = \"Change the text to this.\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#append-text-to-the-existing-text","title":"Append text to the existing text","text":"<p><code>string\\append str, sep</code></p> <p>str = string you want to append to the text</p> <p>sep = string that seperates your text and str</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  section\\append \"string you want to append\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#prepend-text-to-the-existing-text","title":"Prepend text to the existing text","text":"<pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  section\\prepend \"string you want to prepend\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#replace-text","title":"Replace text","text":"<p><code>string\\replace pattern, replacement, plainMatch, useRegex</code></p> <p>If <code>useRegex</code> is true, regular expressions (re module) can be used else gsub is used for replacement.</p> <p>If <code>plainMatch</code> is true, then <code>useRegex</code> is automatically set to false and any thing that must be escaped in the pattern is escaped and any thing that must be escaped in the pattern is escaped for gsub to work.</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  section\\replace \"pattern you want to replace\", \"replacment for pattern\"\n), ASS.Section.Text\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#modifying-tags","title":"Modifying Tags","text":""},{"location":"ASSFoundation/#getdefaulttags","title":"getDefaultTags","text":"<pre><code>data = ASS\\parse line\nstyleTags = data\\getDefaultTags!\n-- Then we can access a table for each tag as such\nangleTable = styleTags.tags.angle\n-- We can directly get the value as:\nangle= styleTags.tags.angle\\get!\n</code></pre>"},{"location":"ASSFoundation/#insertdefaulttags","title":"insertDefaultTags","text":"Parameters Meaning Type tagnames names of tag or table of tag's name string or table index index of section i.e. 1 = first section and so on integer sectionPostion position where tag is inserted ({\\1\\2\\3...}) integer direct if true, index considers all sections and errors if index is not tag section else only considers tag sections boolean <pre><code>data = ASS\\parse line\ndata\\insertDefaultTags \"align\"                            -- Insert a single tag\ndata\\insertDefaultTags {\"scale_x\", \"scale_y\", \"blur\"}     -- Insert multiple tags\ndata\\insertDefaultTags \"fontname\", 2                      -- Insert tag at second tag block\ndata\\commit!\n</code></pre> <p>A way to change the value of the default tag you inserted is:</p> <pre><code>data = ASS\\parse line\nblur = data\\insertDefaultTags \"blur\"\nblur.value = 5\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#geteffectivetags","title":"getEffectiveTags","text":"Parameters Meaning Type index index of section of which effective tag is being required (It considers all types of sections) integer includeDefault include style tag value if override tag is not found boolean includePrevious consider the tag value of tag section before current section boolean copyTags boolean <pre><code>data = ASS\\parse line\n-- Get effective tag values for last section\ntags = (data\\getEffectiveTags -1, true, true, false).tags\n\n-- Then you can insert tags to line in following way\ndata\\removeTags \"align\"\ndata\\insertTags tags.align\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#removetags","title":"removeTags","text":"<p>Remove tags already present in the line</p> Parameters Meaning Type tagnames names of tag or table of tag's name string or table start index of section from where to start removing tags integer end index of selection upto which to remove tags integer relative boolean <pre><code>data = ASS\\parse line\n-- You can pass a single tag name to delete it\ndata\\removeTags \"outline\"\n-- You can pass a table of tag names to delete them all\ndata\\removeTags {\"align\", \"blur\"}\n-- Removes first instance of the tag blur\ndata\\removeTags \"blur\", 1, 1\n-- Removes second to fifth instance of the tag blur\ndata\\removeTags \"blur\", 2, 5\ndata\\commit!\n</code></pre> <p>NOTE: After you remove tags using <code>removeTags</code>, there might be stray '{}' left if that's the only tag. It is recommended that you use cleanTags to remove them. TODO: link the guide portion of clean</p> <p>It is very useful to get a value of a tag to a variable using <code>removeTags</code> as well</p> <pre><code>path = data\\removeTags({\"clip_vect\",\"iclip_vect\"})\n</code></pre>"},{"location":"ASSFoundation/#inserttags","title":"insertTags","text":"<p>Insert tags to current line.</p> Parameters Meaning Type tag tag instance you want to insert assf tag instance start index of section from where to start removing tags integer end index of selection upto which to remove tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean <pre><code>data = ASS\\parse line\ntags = (data\\getEffectiveTags -1, true, true, false).tags\ndata\\insertTags tags.shadow\ndata\\insertTags tags.scale_x, 2\ndata\\insertTags tags.scale_y, -1\n</code></pre>"},{"location":"ASSFoundation/#createtag","title":"createTag","text":"<p>Create a new instance of tags.</p> <pre><code>data = ASS\\parse line\ndata\\removeTags \"position\"\npos = ASS\\createTag 'position', 5, 50\ndata\\insertTags pos\ndata\\commit!\n</code></pre> <p>Alternatively, you can direct insert a tag without assigning it to a variable.</p> <pre><code>data = ASS\\parse line\ndata\\insertTags {ASS\\createTag 'position', 5, 50}                 -- \\pos(5,50)\ndata\\insertTags {ASS\\createTag 'outline', 5}                      -- \\bord5\ndata\\insertTags {ASS\\createTag 'blur', 0.8}                       -- \\blur0.8\ndata\\insertTags {ASS\\createTag 'move', 0, 0, 50, 50}              -- \\move(0,0,50,50)\ndata\\insertTags {ASS\\createTag 'move', 0, 0, 50, 50, 25, 500}     -- \\move(0,0,50,50,25,500)\ndata\\insertTags {ASS\\createTag 'clip_rect', 50, 50, 500, 500}     -- \\clip(50,50,500,500)\ndata\\insertTags {ASS\\createTag 'drawing', 1}                      -- \\p1\ndata\\insertTags {ASS\\createTag \"transform\", {tags}, t1, t2}       -- transfrom all tags inside {tags} from time t1 to t2\n\n-- creating Vectorial Clip\nm = ASS.Draw.Move\nl = ASS.Draw.Line\ndata\\insertTags {ASS\\createTag 'clip_vect', {m(0,0), l(500,500), l(700,100)}}         -- \\clip( m 0 0 l 500 500 700 100)\ndata\\commit!\n</code></pre> <p>Some tags like color and alpha can have special parameters</p> <pre><code>data\\insertTags {ASS\\createTag 'color1', 15, 34, 22}      -- b, g, r\ndata\\insertTags {ASS\\createTag 'alpha', 110}\n\n-- You can also give hex as a parameter\ndata\\insertTags {ASS\\createTag 'alpha', \"6E\"}\n</code></pre>"},{"location":"ASSFoundation/#replacetags","title":"replaceTags","text":"<p>Replace tags present in a line.</p> Parameters Meaning Type tagList tag instance you want to replace assf tag instance start index of section from where to start replacing tags integer end index of selection upto which to replace tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean insertRemaining if the tag you're replacing does not already exist in the line, it adds the tag to the line. boolean <pre><code>data = ASS\\parse line\nbord = ASS\\createTag \"outline\", 5\ndata\\replaceTags bord                   -- Replace all bord tags\ndata\\replaceTags bord, 2, 5, true       -- Replace bord from 2nd to 5th tag block\ndata\\commit!\n</code></pre> <p>You can also create a new instance of tag and replace it in a single line</p> <pre><code>data = ASS\\parse line\ndata\\replaceTags {ASS\\createTag \"angle\", 5}\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#gettags","title":"getTags","text":"<p>Obtain the tags present in the line.</p> Parameters Meaning Type tag name name of the tag string or table start index of section from where to look for tags integer end index of selection upto which to look for tags integer relative if true, only tag section is considered (i.e. 2 = second tag section not literal 2nd section in line) boolean <pre><code>data = ASS\\parse line\nbord = data\\getTags \"outline\"         -- A table that has all the border values in this line\nfirst = bord[1]\\get!                  -- To get the first border value\nfirst = bord[1].value                 -- Another way to get value\nnth = bord[n]\\get!                    -- Get nth border value\n\nfor b in *bord                        -- To get all values of border tags in a line\n  logger\\dump b\\get!\n</code></pre> <p>To get multiple tag values</p> <pre><code>data = ASS\\parse line\nfor tag in *data\\getTags {\"outline\", \"scale_x\"}\n  tagname = tag.__tag.name\n  tagvalue = tag\\getTagParams!\n  logger\\log \"#{tagname}(#{tagvalue})\"\n</code></pre> <pre><code>tag = data\\getTags \"tagname\", 1         -- Get first instance of tag value\ntag = data\\getTags \"tagname\", 1, 3      -- Get from first to third instance of tag value\ntag = data\\getTags \"tagname\", -1, -3    -- Get last instance of tag value\n</code></pre>"},{"location":"ASSFoundation/#modtags","title":"modTags","text":"<p>Modify tags already present in the line. If the tag is not found in the line, it does nothing.</p> Parameters Meaning Type tag name name of the tag string or table callback callback start index of section from where to modify tags integer end index of selection upto which to modify tags integer relative boolean <pre><code>data = ASS\\parse line\ndata\\modTags \"outline\", (tag) -&gt; tag\\add 1            -- Add 1 to all \\bord in the line\ndata\\modTags {\"outline\"}, ((tag) -&gt; tag\\add 1), 1, 3  -- Add 1 to \\bord in 1st to 3rd tag block\ndata\\commit!\n</code></pre> <p>You can have multiple lines for modifying tags, run functions inside them and so on.</p> <pre><code>data = ASS\\parse line\ndata\\modTags {\"scale_x\"}, (tag) -&gt;\n  old_value = tag.value\n  new_value = old_value * 5\n  tag.value = new_value\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#getposition","title":"getPosition","text":"<p>Get position, alignment or org.</p> Parameters Meaning Type style line style string align alignment integer forceDefault ignore override \\pos boolean <pre><code>pos, align, org = data\\getPosition!\n\n-- Get position of the line if alignent were 7\npos, align, org = data\\getPosition nil, 7\n\n-- To get the actual value {\\bord1do the following\npos_x, pos_y = pos.x, pos.y\norg_x, org_y = org.x, org,y\nan = align\n\n-- Alternatively, you can also do something like this if you need value\nx, y = data\\getPosition!\\getTagParams!\n</code></pre>"},{"location":"ASSFoundation/#getlinebounds","title":"getLineBounds","text":"<pre><code>data = ASS\\parse line\nbound = data\\getLineBounds!\n</code></pre> <p>Then to get co-ordinate of the bounding box:</p> <pre><code>x1, y1 = bound[1].x, bound[1].y                 -- To get co-ordinate of top left boundary\nx2, y2 = bound[2].x, bound[2].y                 -- To get co-ordinate of bottom right boundary\n</code></pre> <p>To get the dimension of the bounding box():</p> <pre><code>height = bound.h                                -- To get height of the text\nwidth = bound.w                                 -- To get width of the text\n</code></pre> <p>An easy way to check if the text is visible in the screen or not is to check if height or width is 0 or not</p> <p>To check if the text is animated or not (transform, move etc)</p> <pre><code>if bound.animated == true\n  logger\\log \"Text is animated.\"\nelse\n  logger\\log \"Text is not animated.\"\n</code></pre> <p>Then you can also loop over all the fbf lines to get their bounding box. This is also the same number of lines you'd get if you do line2fbf so you could probably do other interesting things by using this loop.</p> <pre><code>for item in *bound.fbf\n  logger\\dump item\n</code></pre>"},{"location":"ASSFoundation/#getstring","title":"getString","text":"<pre><code>data = ASS\\parse line\nline_text =  data\\getString!\n</code></pre> <p>To loop over tag blocks and get their string.</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  tag_text = section\\getString!\n), ASS.Section.Tag\n</code></pre> <p>Something similar for text</p> <pre><code>data = ASS\\parse line\ndata\\callback ((section) -&gt;\n  text = section\\getString!\n), ASS.Section.Text\n</code></pre>"},{"location":"ASSFoundation/#cleantags","title":"cleanTags","text":"<p>Clean/Sort/Merge tags in the line.</p> Parameters Meaning Type Default level integer 3 mergeConsecutiveSections level for cleanTags boolean true defaultToKeep adjust position after splitting table tagSortOrder add origin if needed to maintain appearance table <p>Clean Level:</p> <ul> <li>0: no cleaning</li> <li>1: remove empty tag sections</li> <li>2: deduplicate tags inside sections</li> <li>3: deduplicate tags globally,</li> <li>4: remove tags matching the style defaults and otherwise ineffective tags</li> </ul> <pre><code>data = ASS\\parse line\ndata\\cleanTags!\ndata\\cleanTags 1\ndata\\cleanTags nil, nil, nil, tagSortOrder              -- where tagSortOrder is the table of tags\n</code></pre> <p>Note: Make sure the tagSortOrder has all the tags in the table if you want to run it. There might be some unwanted results if done otherwise. Also the tags in the tagSortOrder must be the names of the tags as understood by assf.</p>"},{"location":"ASSFoundation/#splitting-stuff","title":"Splitting Stuff","text":""},{"location":"ASSFoundation/#splitatintervals","title":"splitAtIntervals","text":"Parameters Meaning Type Default callback callback cleanLevel level for cleanTags integer 3 reposition adjust position after splitting boolean true writeOrigin add origin if needed to maintain appearance boolean <pre><code>data = ASS\\parse line\nchar = data\\splitAtIntervals 1, 4, false          -- split by characters\nchar = data\\splitAtIntervals 2, 4, true, true     -- split by 2 characters\n\n-- get nth split\nn_char = char[n]\n</code></pre> <p>Working with split characters:</p> <pre><code>lines = LineCollection sub, sel\n\n-- define newLines where we'll be adding each split characters\nnewLines = LineCollection sub\n\nlines\\runCallback (lines, line, i) -&gt;\n  data = ASS\\parse line\n  charLines = data\\splitAtIntervals 2, 4, false          -- split by characters\n\n  -- Looping through each interval\n  for char in *charLines\n    charData = char.ASS\n\n    -- get effective tag for each split\n    effTags = charData.sections[1]\\getEffectiveTags(true,true).tags\n\n    -- do stuff to each split here like adding new tags\n    -- don't forget to add their position as well\n\n    -- commit changes to the split\n    charData\\commit!\n    newLines\\addLine char\n\n-- add new lines that contains all the splits\nnewLines\\insertLines!\n\n-- remove orignal lines\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#repositionsplitlines","title":"repositionSplitLines","text":"<p>After using any other split methods of assf, if you want the splits to maintain position, use this.</p> Parameters Meaning Type Default splitLines split lines from other split methods integer 3 writeOrigin add origin if needed to maintain appearance boolean true <pre><code>lines = LineCollection sub, sel\nnewLines = LineCollection sub\nlines\\runCallback (lines, line, i) -&gt;\n  data = ASS\\parse line\n  charLines = data\\splitAtIntervals 2, 4, false          -- split by 2 characters\n  charLines = data\\repositionSplitLines charLines\n  for char in *charLines\n    charData = char.ASS\n    charData\\commit!\n    newLines\\addLine char\nnewLines\\insertLines!\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#splitattags","title":"splitAtTags","text":"<p>Split line at each tag block and get new lines</p> Parameters Meaning Type Default cleanLevel clean level for \\cleanTags integer 3 reposition repostion split tags boolean writeOrigin add origin if needed to maintain appearance boolean <pre><code>lines = LineCollection sub, sel\nnewLines = LineCollection sub\nlines\\runCallback (lines, line, i) -&gt;\n  data = ASS\\parse line\n  splitLines = data\\splitAtTags nil, true, true\n  for char in *splitLines\n    charData = char.ASS\n\n    -- Here you can do stuff to each line before committing if you desire\n\n    charData\\commit!\n    newLines\\addLine char\nnewLines\\insertLines!\nlines\\deleteLines!\n</code></pre>"},{"location":"ASSFoundation/#stripping-stuff","title":"Stripping Stuff","text":""},{"location":"ASSFoundation/#striptags","title":"stripTags","text":"<p>Remove all tags present in the line.</p> <pre><code>data\\stripTags!\n</code></pre>"},{"location":"ASSFoundation/#striptext","title":"stripText","text":"<p>Remove all text present in the line.</p> <pre><code>data\\stripText!\n</code></pre>"},{"location":"ASSFoundation/#stripcomments","title":"stripComments","text":"<p>Remove all comments present in the line.</p> <pre><code>data\\stripComments!\n</code></pre>"},{"location":"ASSFoundation/#stripdrawings","title":"stripDrawings","text":"<p>Remove all drawings as well as <code>\\\\p</code> tags present in the line.</p> <pre><code>data\\stripDrawings!\n</code></pre>"},{"location":"ASSFoundation/#miscellaneous","title":"Miscellaneous","text":""},{"location":"ASSFoundation/#trim","title":"trim","text":"<p>Trim whitespace in the beginning or end of the text.</p> <pre><code>data\\trim!\n</code></pre>"},{"location":"ASSFoundation/#gettagcount","title":"getTagCount","text":"<p>Get the total number of tags present in the line. Start as well as inline override tags - it counts all of them.</p> <pre><code>tagCount = data\\getTagCount!\n</code></pre>"},{"location":"ASSFoundation/#gettextextents","title":"getTextExtents","text":"<p>Get the width of the text no matter it's orientation.</p> <pre><code>width = data\\getTextExtents!\n</code></pre>"},{"location":"ASSFoundation/#gettextmetrics","title":"getTextMetrics","text":"<pre><code>metrics = data\\getTextMetrics!\n\n-- Access different metrics\nascent = metrics.ascent\ndescent = metrics.descent\ninternal_leading = metrics.internal_leading\nexternal_leading = metrics.external_leading\nheight = metrics.height\nwidth = metrics.width\n</code></pre>"},{"location":"ASSFoundation/#getsectioncount","title":"getSectionCount","text":"<p>Get the exact count of the type of section</p> <pre><code>tagSectionCount = data\\getSectionCount ASS.Section.Tag\ntextSectionCount = data\\getSectionCount ASS.Section.Text\ndrawingSectionCount = data\\getSectionCount ASS.Section.Drawing\ncommentSectionCount = data\\getSectionCount ASS.Section.Comment\n</code></pre>"},{"location":"ASSFoundation/#gettextlength","title":"getTextLength","text":"<p>Get the total number of characters in the text. Letters, spaces and punctuations.</p> <pre><code>len = data\\getTextLength!\n</code></pre>"},{"location":"ASSFoundation/#isanimated","title":"isAnimated","text":"<p>Check if the text is animated or not. Checks if there are transforms, move, fade or karaoke tags. It's intelligent enough to know that a single frame line can't be animated so it'll return false even if a single frame line has those tags.</p> <pre><code>checkAnimated = data\\isAnimated!\n</code></pre>"},{"location":"ASSFoundation/#reverse","title":"reverse","text":"<p>It reverses the text of the current line. <code>It's huge.</code> will become <code>.eguh s'tI</code>. This is sometimes useful but the most useful part of this function is that it keeps the tags intact. So for example if you run this in gbc, the gbc will remain intact while the text will be reversed.</p> <pre><code>data\\reverse!\n\n-- you can also save it to a variable and do some stuff to it before committing it\nrev = data\\reverse!\n</code></pre>"},{"location":"ASSFoundation/#working-with-move","title":"Working with move","text":"<p>Check if move exists in a line</p> <pre><code>data = ASS\\parse line\npos = data\\getPosition!\nif pos.class == ASS.Tag.Move\n  logger\\log \"Move exists\"\nelse\n  logger\\log \"Move does not exist\"\n</code></pre> <p>Check if the move is simple or not</p> <pre><code>-- if move is simple \"\\move(x1,y1,x2,y2)\"\npos.__tag.signature == \"simple\"\n\n-- else \"\\move(x1,y1,x2,y2,t1,t2)\"\npos.__tag.signature == \"default\"\n</code></pre> <p>Obtain values of move tag</p> <pre><code>if pos.class == ASS.Tag.Move and pos.__tag.signature == \"simple\"\n  x1, y1, x2, y2 = pos\\getTagParams!\nelseif pos.class == ASS.Tag.Move and pos.__tag.signature == \"default\"\n  x1, y1, x2, y2, t1, t2 = pos\\getTagParams!\n</code></pre> <p>It is also possible to obtain each value individually if you desire.</p> <pre><code>x1, y1 = pos.startPos\\get!\nx2, y2 = pos.endPos\\get!\nt1 = pos.startTime\\get!\nt2 = pos.endTime\\get!\n</code></pre>"},{"location":"ASSFoundation/#working-with-transform","title":"Working with transform","text":"<p>There are 3 types of transform</p> <ol> <li>\"accel\" - \\t(accel,style modifiers)</li> <li>\"default\" - \\t(t1,t2,accel,style modifiers)</li> <li>\"time\" - \\t(t1,t2,style modifiers)</li> </ol> <p>To check if tags are transformed</p> <pre><code>data = ASS\\parse line\ntags = data\\getEffectiveTags -1, true, true, false\ntransformed = tags\\checkTransformed!\n-- Get the list of all the tags that were transformed\nfor key, _ in pairs transformed\n  logger\\log key\n</code></pre> <p>To get the idea of how transform table is structured, you can run the following script</p> <p>Obtain all parameters of transforms</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor tr in *transforms\n  t1, t2, tags = tr\\getTagParams!\n</code></pre> <p>Change the times or accel in transforms (Here adding 100 to start time, 200 to end time and 5 to accel of all transforms)</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor index, tr in ipairs transforms\n  tr.startTime\\add 100\n  tr.endTime\\add 200\n  tr.accel\\add 5\ndata\\commit!\n</code></pre> <p>Modify tags inside transforms (In this case add 50 to fscx as an example)</p> <pre><code>data = ASS\\parse line\ntransforms = data\\getTags \"transform\"\nfor index, tr in ipairs transforms\n  for tag in *tr.tags\\getTags!\n    if tag.__tag.name == \"scale_x\"\n      tag\\add 50\ndata\\commit!\n</code></pre>"},{"location":"ASSFoundation/#working-with-fade","title":"Working with fade","text":"<p>There are two types of fade. Simple fade (\\fad) and complex fade (\\fade).</p> <pre><code>-- Simple fade\nfad = data\\getTags \"fade_simple\"      -- Get simple fade\nt1, t2 = fad\\getTagParams!            -- Get parameters of simple fade\n\n-- Complex fade\nfade = data\\getTags \"fade\"                            -- Get complex fade\na1, a2, a3, t1, t2, t3, t4 = fade\\getTagParams!       -- Get parameters of simple fade\n</code></pre> <p>Parameters of fade tags:</p> Parameters in assf Equivalent fade parameters inAlpha a1 midAlpha a2 outAlpha a3 inStartTime t1 inDuration t2 outStartTime t3 outDuration t4 <p>Modifying fades</p> <pre><code>for tag in *data\\getTags {'fade'}\n  tag.inStartTime -= 150\n  tag.outStartTime -= 150\n</code></pre>"},{"location":"Abacus/","title":"Abacus","text":"<p>Available in Dependency Control</p> <p>Source to script</p> <p>Link to script</p> <p>The script <code>Abacus</code> allows you to recalculate the value of tags in the line. The GUI of this script is dynamically generated such that only tags that are available in the line are shown in the GUI.</p> <p></p>"},{"location":"Abacus/#buttons","title":"Buttons","text":""},{"location":"Abacus/#add","title":"Add","text":"<p>This will increase/lower value of selected tags by adding the user specified number. If the input is positive, the tag value will increase and if the input is negative, the tag value will decrease.</p>"},{"location":"Abacus/#multiply","title":"Multiply","text":"<p>This will increase/lower value of selected tags based on given percentage.</p> <p>For example, if the user specifies 150, you will get 50% increase in the value of specified tag. If user specifies 50, you will get a 50% decrease in the value of the specified tags.</p>"},{"location":"Abacus/#reset-gui","title":"Reset GUI","text":"<p>The checkboxes you ticked as well as the values you typed last time are remembered and already populate the GUI when you open the script. If you wish to unset all of them at once to get a clean GUI, you click this button. This will close the current GUI and load a clean new GUI.</p>"},{"location":"Abacus/#input","title":"Input","text":"<p>There are a few types of input a user can provide.</p>"},{"location":"Abacus/#time","title":"Time","text":"<p>Whenever you're dealing with time like line's start time or end time or karaoke tags, the input provided is in time. You can input time in various ways that makes sense. For example, it makes most sense to input time in centiseconds when dealing with karaoke tags.</p> Format Example Remarks h:mm:ss.ms 0:01:20.03 n 30 Time in miliseconds nms 30ms Time in miliseconds ncs 30cs Time in centiseconds ns 30s Time in seconds nm 30m Time in minutes nh 3h Time in hours nf 3f Time in frames (Requires video to be open)"},{"location":"Abacus/#color","title":"Color","text":"<p>For all color related tags, you input r, g and b value separated by comma that will be added/multiplied to current tag. The resulting values are clamped between 0 and 255.</p> Format Example r, g, b 20,30,40"},{"location":"Abacus/#number","title":"Number","text":"<p>If the input is neither time or color, it will just be a number.</p>"},{"location":"Abacus/#lua-math-expression","title":"Lua Math Expression","text":"<p>While its utility is debatable, this script can accept any valid lua math expressions as input.</p> <p>Examples.</p> <pre><code>5+3\nmath.sin(5)\nmath.sin(3)\nmath.random(-10,10)\n</code></pre> <p>Lua cannot do float random by default so there is an additional function accpeted: <code>math.randomfloat(min, max)</code>.</p>"},{"location":"Abacus/#input-boxes","title":"Input Boxes","text":"<p>There are two input boxes. Let's call them x-input box and y-input box for now as shown in image below.</p> <p></p> <p>Most of the tags have only one parameter and will use x-input box. There are tags that use both input boxes. Most of them have to do with time or coordinates. The following table shows tags that use both boxes and all other tags use only x-input box.</p> Tag x-input box y-input box time start time of line end time of line pos start time end time pos/org/move/clip x coordinate y coordinate move x coordinate y coordinate move(t1,t2) start time of move tag end time of move tag org x coordinate y coordinate fad start time of fade tag end time of fad tag clip (Rectangle) all x coordinate of clip all y coordinate of clip clip_rect (x1,y1) x1 coordinate of clip y1 coordinate of clip clip_rect (x2,y2) x2 coordinate of clip y2 coordinate of clip iclip (Rectangle) all x coordinate of iclip all y coordinate of iclip iclip_rect (x1,y1) x1 coordinate of iclip y1 coordinate of iclip iclip_rect (x2,y2) x2 coordinate of iclip y2 coordinate of iclip clip (Vector) all x coordinate of clip all y coordinate of clip iclip (Vector) all x coordinate of iclip all y coordinate of iclip shape all x coordinate of a shape all y coordinate of a shape transform (t1,t2) start time of a transform end time of a transform"},{"location":"Abacus/#increase-with-each-line","title":"Increase with each line","text":"<p>This option will be shown to you if you have selected multiple lines. If this is ticked, your input value will increase by the input amount for each iteration of selected lines. For example, if your input is 1, the first line will have input of 1, second will have input of 2, third line will have input of 3 and so on.</p> <p>This works for all kinds of inputs mentioned above.</p>"},{"location":"Add%20Grain/","title":"Add Grain","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>The script <code>Add Grain</code> allows you to emulate the grain texture in your sign. This script closely follows the manual approach of creating grain from this guide. All you need to do before using this script is to install the grain font from this link</p>"},{"location":"Add%20Grain/#usage","title":"Usage","text":"<p>You can run this script from the menu as well as from the GUI. <code>Add grain</code> from the menu adds simple grain while <code>Add dense grain</code> makes the grain a little denser using shad trick. If you want even denser grain than that, you need to use the GUI.</p> <p></p> <p>In the GUI, you can increase the <code>Grain Intensity</code> to increase the density of the grain. Normally the script makes the grain in pure white and pure black color as recommended in the guide but in cases where you need custom grain color, you can set it in the GUI as well.</p>"},{"location":"Add%20Grain/#static-grain","title":"Static Grain","text":"<ul> <li> <p>Cover your sign with <code>!</code> as shown in the image above. It is easier to do this if you use <code>\\an7</code> and break the line using <code>\\N</code> whenever it goes beyond the sign. You do not need to add or modify any tags like <code>\\fn</code>, <code>\\bord</code>, <code>\\shad</code> etc. The script will do it for you. The only tag you might want to change before adding <code>!</code> is <code>\\fsc[xy]</code>. Higher the value of scale, lighter the grain and vice versa.</p> </li> <li> <p>Run the script and choose one of the two options in the menu or from the GUI. The script will, in order, check if the font <code>grain.ttf</code> is installed, replace <code>!</code> with random characters, split the line to pure white and pure black layers, set the line border and shadow to 0 and add necessary tags like fontnames, color and alpha.</p> </li> <li> <p>Adjust the alpha, blur and scale until it looks like surrounding grain.</p> </li> <li> <p>Clip the line with grain to the text or shape if required.</p> </li> </ul>"},{"location":"Add%20Grain/#dynamic-grain","title":"Dynamic Grain","text":"<ul> <li> <p>Cover your sign with <code>!</code> as described above for static grain.</p> </li> <li> <p>Clip the line to the text or shape if required.</p> </li> <li> <p>Split the line into frames using scripts like Hyperdimensional Relocator or SplitTimer. In some cases, you can go further and check if the anime is animated on twos or threes and use <code>SplitTimer</code> to split line in <code>n</code> frames accordingly instead of splitting into lines with 1 frame each.</p> </li> <li> <p>Select all the lines and run the script. The result will be dynamic grain.</p> </li> </ul>"},{"location":"AegiGUI/","title":"AegiGUI","text":"<p>Available in Dependency Control</p> <p>Link to script</p>"},{"location":"AegiGUI/#introduction","title":"Introduction","text":"<p>I hate making GUIs for Aegisub macros and you do too. This module helps you to create and more importantly modify the GUIs easily and quickly. It was designed to take a single string and convert it to a GUI table that Aegisub accepts. Additionally, the GUI string looks similar to how it will look in Aegisub so you can look at the code itself to get the general idea of how to create and modify the string to get corresponding look in Aegisub.</p>"},{"location":"AegiGUI/#showcase","title":"Showcase","text":"<p>Let's say we want to make a simple GUI like this:</p> <p></p> <p>Then the GUI string will look something like this.</p> <pre><code>str = \"\n| drop,lineselect,Selected lines::All lines,Selected lines | check,unitalic,Unitalicize already italic lines |\n| label, \\\\fax value:                                      | float,faxvalue,0                                |\n\"\n</code></pre> <p>Notice that the GUI string looks very similar to how the GUI looks in Aegisub. Now let's say I don't like this and want to change the GUI to look something like this:</p> <p></p> <p>All I'd have to do is to modify the string as:</p> <pre><code>str = \"\n| drop,lineselect,Selected lines::All lines,Selected lines |                  |\n| check,unitalic,Unitalicize already italic lines          |                  |\n| label, \\\\fax value:                                      | float,faxvalue,0 |\n\"\n</code></pre> <p>You can imagine that this change was very trivial to do in the string. Now finally, lets say I want to add an empty space in the middle of the GUI.</p> <p></p> <p>All I'd to do is add <code>null</code>.</p> <pre><code>str = \"\n| drop,lineselect,Selected lines::All lines,Selected lines |                  |\nnull\n| check,unitalic,Unitalicize already italic lines          |                  |\n| label, \\\\fax value:                                      | float,faxvalue,0 |\n\"\n</code></pre> <p>If this does not convince you to use this module, I don't think anything else in this page will and you can stop reading further. For someone new to making Aegisub GUI, the reason why I believe this showcase is impressive is because if I wanted to add an empty space in the middle like this, I would have to change the coordinates of all the elements that came after this. It's easy in small GUI like this but imagine doing the same in a decently large GUI. If the difference of simply adding <code>null</code> versus manually updating every single coordinate of all the items does not impress you, nothing else about this module will.</p>"},{"location":"AegiGUI/#basic-usage","title":"Basic Usage","text":"<p>There are three methods provided by this module.</p>"},{"location":"AegiGUI/#aegiguicreate","title":"AegiGUI.create","text":"<p>This method converts the string you pass to tables that can be understood by Aegisub to create GUIs.</p> Arguments Description <code>GUI string</code> String that has all the class info <code>BUTTON string</code> String that has all the button info Returns Description <code>GUI table</code> Table that can be fed to aegisub.dialog to create GUI <code>BUTTON table</code> Table that can be fed to aegisub.dialog to create buttons <code>BUTTON ids</code> Table that can be fed to aegisub.dialog to assign ID to buttons <code>Error Message</code> Any error messages that the module might have found in your GUI string <code>Error Level</code> 0 means non-fatal errors while 1 means fatal errors in your GUI string <pre><code>gui = AegiGUI.create str\naegisub.dialog.display(gui)\n\ngui, button = AegiGUI.create str, btn\naegisub.dialog.display(gui, button)\n</code></pre>"},{"location":"AegiGUI/#aegiguidebug","title":"AegiGUI.debug","text":"<p>This method is supposed to be used only when you are writing a script. Normally when there are fatal errors, the module will show you those errors as they generally mean GUI cannot be initialized. However, all non-fatal errors are suppressed. As a script author, you should fix them as well since they could have undesired effects and could have been caused by some oversight.</p> <p>So this method collects them and shows you giving an opportunity to fix them. After you fix them, initializing GUI is as easy as changing <code>AegiGUI.debug</code> to <code>AegiGUI.create</code>.</p> <p>Note</p> <p>This method does not initialize any GUI. In fact this stops any further execution of the script and only shows if there are any issues initializing the GUI string or not.</p> Arguments Same as AegiGUI.create Returns Nothing <pre><code>AegiGUI.debug str\n\nAegiGUI.debug str, btn\n</code></pre>"},{"location":"AegiGUI/#aegiguiopen","title":"AegiGUI.open","text":"<p>This method not only converts the string but also uses that table to initialize the GUI so you don't have to.</p> Arguments Same as AegiGUI.create Returns Description <code>pressed</code> String or boolean that shows info about which buttons was pressed <code>result</code> Table that contains values of all the items of the GUI <p>Note</p> <p><code>pressed</code> is boolean false if button with <code>cancel</code> id is pressed. Similarly, it is boolean true if button with <code>ok</code> id is pressed. It is string i.e. button name which was pressed for custom buttons.</p> <pre><code>pressed, result = AegiGUI.open str\n\npressed, result = AegiGUI.open str, btn\n</code></pre>"},{"location":"AegiGUI/#aegiguimerge","title":"AegiGUI.merge","text":"<p>This method allows you to merge two gui strings. It can directly open the gui and return pressed button and gui result or it can just return the combined gui table that can be fed to aegisub.dialog.</p> Arguments Description <code>Source GUI string</code> The gui string that you want another gui string be appended to <code>Target GUI string</code> The gui string that you want to appended to another gui string <code>BUTTON string</code> String that has all the button info <code>x Offset</code> All elements in target GUI string will be ofset by this amount (Default = 0) <code>y Offset</code> All elements in target GUI string will be ofset by this amount (Default = 0) <code>open</code> Boolen if you want to open the merged gui(Default = false) Returns Description <code>GUI table</code> Table that can be fed to aegisub.dialog to create GUI <code>BUTTON table</code> Table that can be fed to aegisub.dialog to create buttons <code>BUTTON ids</code> Table that can be fed to aegisub.dialog to assign ID to buttons <pre><code>gui  = AegiGUI.merge str1, str2, \"Apply, Cancel:cancel\", 1, 1\naegisub.dialog.display(gui)\n\npressed, res = AegiGUI.merge str1, str2, _, 25, 0, true\n</code></pre>"},{"location":"AegiGUI/#formatting-the-gui-string","title":"Formatting the GUI string","text":"<p>There are a few rules that the GUI string follows:</p> <ol> <li>Every class will be enclosed by <code>|</code> character. A space between two <code>|</code> is called a cell like a spreadsheet cell.</li> <li>One cell has an width of 1 and height of 1 in GUI table.</li> <li>There will be equal number of cells in each line of GUI string. This effectively means there will be equal number of <code>|</code> in each line.</li> <li><code>null</code> is a special keyword that tells the module to leave that cell or that whole row alone. If all cells in a row is empty, it is equivalent to a <code>null</code> row.</li> <li>An empty cell means the width of this cell will be added to whatever non-empty cell it finds before it in its row. (Unless it encounters a <code>null</code> cell before it finds a non-empty cell.)</li> <li>If there is a text (for textbox or label class for example) that has characters like <code>\\n</code>, <code>,</code> or <code>|</code>, the whole text must be enclosed inside <code>[[...]]</code> to escape them. Naturally you cant use <code>[[]]</code> in any text. Hopefully you never have its need.</li> </ol>"},{"location":"AegiGUI/#list-of-all-classes","title":"List of all classes","text":"Class Alias Argument 1 Argument 2 Argument 3 Argument 4 Argument 5 Argument 6 Remarks label - label - - - - - - edit - name text (opt) hint (opt) - - - - textbox text name height text(opt) hint(opt) - - - checkbox check name label value(opt) hint(opt) - - - intedit int name value(opt) min(opt) max(opt) hint(opt) - - floatedit float name value(opt) min(opt) max(opt) step(opt) hint(opt) - dropdown drop name items value(opt) hint(opt) - - - color - name colorstring(opt) hint(opt) - - - - coloralpha - name colorstring(opt) hint(opt) - - - - alpha - name alphastring(opt) hint(opt) - - - - pad - value - - - Non-Aegi class"},{"location":"AegiGUI/#label","title":"label","text":"<pre><code>str = \"\n| label, Label 1          | label, Label 2          | label, Label 3 |\n| label, Label of width 3 |                         |                |\n|                         | label, Label of width 2 |                |\n| label, Label of width 1 | null                    |                |\n\"\n</code></pre> <pre><code>lblStr = \"This is a string in variable.\"\nstr = \"\n| label, #{lblStr}                                   |\n| label, [[Escaping illegal characters like , or |]] |\n\"\n</code></pre>"},{"location":"AegiGUI/#intedit","title":"intedit","text":"<pre><code>str = \"\n| label, Basic intedit class          |\n| intedit, int1, 10                   |\n| label, With alias                   |\n| int, int2, 10                       |\n| label, with minimum value           |\n| int, int3, 10, 0                    |\n| label, with maximum value           |\n| int, int4, 10, _, 100               |\n| label, with both max and min value  |\n| int, int5, 10, 0, 100               |\n| label, with hint                    |\n| int, int6, 10, _, _, This is a hint |\n\"\n</code></pre>"},{"location":"AegiGUI/#floatedit","title":"floatedit","text":"<pre><code>str = \"\n| label, Basic floatedit class                |\n| floatedit, float1, 1.5                      |\n| label, With alias                           |\n| float, float2, 1.5                          |\n| label, with minimum value                   |\n| float, float3, 1.5, 0                       |\n| label, with maximum value                   |\n| float, float4, 1.5, _, 10.5                 |\n| label, with both max and min value          |\n| float, float5, 1.5, 0, 10.5                 |\n| label, [[with both max,min and step value]] |\n| float, float6, 1.5, 0, 10.5, 0.5            |\n| label, with hint                            |\n| float, float7, 1.5, _, _, _, This is a hint |\n\"\n</code></pre>"},{"location":"AegiGUI/#checkbox","title":"checkbox","text":"<pre><code>str = \"\n| label, Basic checkbox class                 |\n| checkbox, chk1, Checkbox 1                  |\n| label, With alias                           |\n| check, chk2, Checkbox 2                     |\n| label, Force true value                     |\n| check, chk3, Checkbox 3, true               |\n| label, Force false value                    |\n| check, chk4, Checkbox 4, false              |\n| label, With hints                           |\n| check, chk5, Checkbox 5, _, This is a hint. |\n\"\n</code></pre>"},{"location":"AegiGUI/#dropdown","title":"dropdown","text":"<p>This one was a bit tricky because you have to pass a table to dropdown items so all table items are delimited by <code>::</code> which is then converted to table by the module.</p> <p></p> <pre><code>str = \"\n| label, Basic dropdown class |\n| dropdown, drp1, 1::2::3, 1  |\n| label, With alias           |\n| drop, drp2, item1::item2    |\n\"\n</code></pre> <p>Since tables can mostly be quite large, it is better to create the table outside the GUI string and append it later.</p> <p></p> <pre><code>alfa = {\"00\",\"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\",\"A0\",\"B0\",\"C0\",\"D0\",\"F0\"}\ndrop_alfa = table.concat(alfa,\"::\")..\",\"..alfa[8]\n\nlayer = {\"-5\",\"-4\",\"-3\",\"-2\",\"-1\",\"+1\",\"+2\",\"+3\",\"+4\",\"+5\"}\ndrop_layer = table.concat(layer,\"::\")..\",\"..layer[6]\n\nstr = \"\n| label, alpha | drop, alpha, #{drop_alfa}  |\n| label, layer | drop, layer, #{drop_layer} |\n\"\n</code></pre>"},{"location":"AegiGUI/#textbox","title":"textbox","text":"<p>This is the point where you will feel like this module is held with nothing but a duct tape and for good reason. <code>textbox</code> is notoriously hard to work with in complex GUIs. When I tell Aegisub to make a textbox that is one has width 1, how wide is that? Nobody knows. That width is in fact equal to the longest width of other items in that column. What if there are no other items in that column. Well then your textbox has no width. Lets say your textbox has a certain width and I set its width to two. Does that mean its width has been doubled? No again. Its width is sum of longest element of each column. Because of this nature of textbox where its width depends on dimensions of other elements in that row, there is no deterministic way to make textbox. Textbox is always hard to get right without some trial and error and unfortunately, this module does not solve this issue.</p> <p>This module does provide a class called <code>pad</code> which can force a cell to be a certain characters wide which will help use maintain the width of a textbox.</p> <p></p> <pre><code>str = \"\n| label, Textbox without padding |\n| text, txt1, 5                  |\n|                                |\n|                                |\n|                                |\n|                                |\n\"\n</code></pre> <p>Notice that textbox is as wide as the label above it. If the label was shorter, the textbox would be less wide as well. Also notice that since I gave it the height of 5, I have to add five empty cells (counting itself) below it.I could also add <code>null</code> to get the same effect instead of empty cells.</p> <p></p> <pre><code>str = \"\n| label, Textbox with padding | pad, 50 |\n| text, txt1, 5               |         |\n|                             |         |\n|                             |         |\nnull\nnull\n\"\n</code></pre> <p>Here I padded the second column by 50 characters which made the textbox longer than the first example. I also mixed empty cells and <code>null</code> lines to show that they effectively work as the same.</p> <p></p> <pre><code>textboxValue = \"My name is Yoshikage Kira. I'm 33 years old. My house is in the northeast section of Morioh, where all the villas are...\"\n\nstr = \"\n|label, Textbox with value       |null |label, Using variable as value    |\n|text, txt1, 5, This is some text|pad,5|text, txt2, 5, [[#{textboxValue}]]|\nnull\nnull\nnull\nnull\n\"\n</code></pre> <p>Here I put value inside the textbox. In the second box, I put the text from a variable that was put inside <code>[[..]]</code> so that any illegal characters inside can be escaped. Additionally, padding here is not to add width to textbox but to separate two textboxes.</p>"},{"location":"AegiGUI/#edit","title":"edit","text":"<pre><code>str = \"\n| edit, edit1 |\n\"\n</code></pre> <p>At the very least, width 1 of edit class has some default width.</p> <p></p> <pre><code>str = \"\n| label, It's width also depends on other elements of row|\n| edit, edit1, Value inside edit box                     |\n\"\n</code></pre> <p>Width of edit class is also dependant on longest element of that column so that can be manipulated just like we manipulated width of textbox.</p>"},{"location":"AegiGUI/#color","title":"color","text":"<pre><code>str = \"\n| label, Empty color value is valid      | color, cl1            |\n| label, BGR value can be used like this | color, cl2, &amp;H0405F7&amp; |\n| label, RGB can be used like this       | color, cl3, #F70504   |\n\"\n</code></pre>"},{"location":"AegiGUI/#coloralpha","title":"coloralpha","text":"<pre><code>str = \"\n| label, Empty coloralpha value is valid  | coloralpha, cl1              |\n| label, ABGR value can be used like this | coloralpha, cl2, &amp;HAA0405F7&amp; |\n\"\n</code></pre>"},{"location":"AegiGUI/#buttons","title":"Buttons","text":"<p>Button string is optional. If you do not pass button string, you will get a default <code>OK</code> and <code>Cancel</code> buttons.</p> <p>A simple button string looks like this:</p> <pre><code>btn = \"Button 1,Button 2\"\n</code></pre> <p>If you want to provide button IDs to a specific button, the button string looks like this:</p> <pre><code>btn = \"Button 1:ok, Button 2:cancel\"\n</code></pre> <p>This will assign <code>Button1</code> with <code>ok</code> button ID and <code>Button2</code> with <code>cancel</code> button ID. To see which button IDs are valid, see here.</p> <p>If you want multiple custom buttons, you can assign a specific class to specific button.</p> <pre><code>btn = \"Button 1,Button 2, Button 3:cancel\"\n</code></pre> <p>This will make <code>Button3</code> return boolean false and every other button returns button name.</p>"},{"location":"AegiGUI/#some-minor-things-that-the-module-will-handle-for-you","title":"Some minor things that the module will handle for you","text":"<ol> <li>Unless an argument for a class is stated to be optional, every argument must be supplied. It will raise fatal errors if you do not.</li> <li>If you do not provide optional arguments, default value will be used for them. Please be aware of their default values when you skip them.</li> <li>If you provide more arguments than is necessary for a class, they will be ignored with non-fatal warnings.</li> <li>Every arguments type will be checked and if it does not match, fatal error will be raised.</li> <li>If you provide float number when an argument demands an integer, every value after decimal will be truncated with non-fatal error raised. (This is default behaviour for intedit class in Aegisub)</li> <li>All elements of list in dropdown must be unique. If they are not, duplicated items will be dropped with non-fatal warnings.</li> <li>All names of class must be unique. If they are not, fatal error is raised.</li> </ol>"},{"location":"AegiGUI/#some-tips","title":"Some Tips","text":"<ul> <li> <p>You can use a spreadsheet tool like Excel or LibreCalc to create the basic structure of the GUI string. Pop in the values in the cells like you want to see them in the GUI and save it as csv file with <code>|</code> as a delimiter. This will do most of the work for you. You can now clean up the text and fix anything if necessary.</p> </li> <li> <p>There is actually no need for any formatting as long as the rules of GUI strings are followed. You don't need to align the cells like I did in examples. You don't need to strip spaces around the cell as well. However doing so will give you a better picture of how the GUI will look by looking at the code itself which will only benefit you. I personally use neovim and use this plugin to automagically format them. You could also pop the string in a markdown file and use formatter like prettier to format it as markdown tables. Alternately, format it manually with bunch of spaces.</p> </li> <li> <p>All the examples in this page along with two of the GUIs from my own script has been made into a script here.</p> </li> </ul>"},{"location":"AegiGUI/#this-module-may-not-be-for-you","title":"This module may not be for you","text":"<p>While this module does a lot of what I imagined it to do, it is not a perfect alternative to how we traditionally made Aegisub GUI. While I was able to easily replicate the GUIs of of my own scripts, when I tried to replicate unanimated's behemoth of GUIs, it still amounted to a lot of frustration. Unanimated merges a lot of cells and adds a ton of elements in a single GUI so that did not help the matter at all.</p> <p>To spin this weakness to its strength, I guess this module forces you to write simpler GUIs because if you want an easier time writing a GUI using this module, you need to keep your elements aligned to grids majority of the time. Keep your GUIs simple and this module will surely make the job easier for you.</p>"},{"location":"AssfPlus/","title":"AssfPlus","text":"<p>Available in Dependency Control</p> <p>Link to script</p>"},{"location":"AssfPlus/#introduction","title":"Introduction","text":"<p>This is a module that will contain a lot of extensions for ASSFoundation. Given how the development in ASSFoundation has not progressed for years, this is the only way for me to add more features to it. This will either fix things in ASSFoundation, extend an existing feature or add a feature that does not exist at all.</p>"},{"location":"AssfPlus/#linecollection","title":"LineCollection","text":"<p>This acts on the line collected by LineCollection.</p>"},{"location":"AssfPlus/#collecttags","title":"collectTags","text":"<p>This collects all the tag's names present in the selected lines. Additionally, it collects information like if there are start tags, inline tags and transforms present in the line or not.</p> Arguments Meaning Type Default Value lines LineCollection line table table - errorOnNoTags Exit the script if no tags were collected with a message boolean false checkDrawing Also collects \\p tags boolean false Returns Description Type collection A table with all the info collectd table <p>The collection returns a table in the following format:</p> <pre><code>collection =\n    tagList: {}\n    tagTypes: {start_tag: false, inline_tags: false, transforms: false}\n    multiple_inline_tags: false\n</code></pre> <p>Usage:</p> <pre><code>lines = LineCollection sub, sel\nreturn if #lines.lines == 0\ncollection = AssfPlus.LineCollection.collectTags lines\n</code></pre>"},{"location":"AssfPlus/#line-data","title":"Line Data","text":""},{"location":"AssfPlus/#getlinebounds","title":"getLineBounds","text":"<p>This is similar to <code>getLineBounds</code> of ASSFoundation but this allows you to get the line bounds after removing border, shadows, clip and blur. All of these tags affect the line bounds. So when I need to find the line bounds of fill of text only for example, I can disable them and get actual line bounds.</p> Arguments Meaning Type Default Value data Assf Line Contents - - noBordShad bounds without border and shadow boolean false noClip bounds without clips boolean false noBlur bounds without blur boolean false noPerspective bounds without perspective boolean false Returns Description Type bounds Line bounds same as assf Table <pre><code>data = ASS\\parse line\n\n-- This will give you the same result as assf will.\nbounds = lineData.getLineBounds data\n\n-- This will give you line bounds after removing borders and shadows\nbounds = lineData.getLineBounds data, true\n\n-- This will give you line bounds after removing, borders, shadows, clips, blurs and perspective.\nbounds = lineData.getLineBounds data, true, true, true, true\n</code></pre>"},{"location":"AssfPlus/#getboundingbox","title":"getBoundingBox","text":"<p>It's purpose is just like getLineBounds but this will give you the co-ordinates of the bounding box. It's just a convenience function.</p> Arguments Same as getLineBounds Returns Type x1, y1, x2, y2 Number <pre><code>data = ASS\\parse line\nx1, y1, x2, y2 = lineData.getBoundingBox data, true\n</code></pre>"},{"location":"AssfPlus/#firstsectionistag","title":"firstSectionIsTag","text":"<p>Find out if there is a tag section before text section or drawing section.</p> Arguments Meaning Type Default Value data Assf Line Contents - - Returns Type true if there is a tag section in the beginning boolean the index of start tag section integer"},{"location":"AssfPlus/#trim","title":"trim","text":"<p>While assf does have a trim method, it only trims the spaces from the beginning and the end of the line but it does not trim spaces around line breaks. These spaces can mess up calculation of text extents.</p> Arguments Meaning Type Default Value data Assf Line Contents - - Returns Nothing <pre><code>data = ASS\\parse line\nlineData.trim(data)\n</code></pre>"},{"location":"AssfPlus/#gettextshape","title":"getTextShape","text":"<p>There is really no way to convert text to shape in Linux reliably (not even ILL at the time of this writing) and there is no way to use Assf to convert text to shape in any OS at all. This is just a temporary workaround until a proper fix for it is made.</p> <p>There were two main problems that I faced:</p> <ul> <li>Any text that is more than 18 characters are truncated when converted to shapes. I fixed this by splitting the text into chunks of 15 characters, converting them to shape and then appending them together.</li> <li>There were many fonts where the aegisub.text_extents and pangocairo gave wrong font extents and metrics. This caused the converted shape to be scaled incorrectly. I tried to fix it by using SubInspector which correctly returns bounds of the actual generated bitmaps.</li> </ul> <p>The resulting shape has an alignment of 7, scale of 100 and is anchored to position (0,0).</p> <p>Known cases where it may not work:</p> <ul> <li>Gradient by character</li> <li>Negative spacing</li> </ul> Arguments Meaning Type Default Value data Assf Line Contents - - Returns Type Shape String Width Number Height Number <pre><code>data = ASS\\parse line\nshape = lineData.getTextShape data\nshape, width, height = lineData.getTextShape data\n</code></pre>"},{"location":"AssfPlus/#converttexttoshape","title":"convertTextToShape","text":"<p>Convert and replace the text in current line to shape.</p> Arguments Meaning Type Default Value data Assf Line Contents - - Returns nil <pre><code>data = ASS\\parse line\nlineData.convertTextToShape data\n</code></pre>"},{"location":"AssfPlus/#changealignment","title":"changeAlignment","text":"<p>Change alignment of a line while maintaining its position.</p> Arguments Meaning Type Default Value data Assf Line Contents - - alignment Alignment to change to number 7 Returns nil <pre><code>data = ASS\\parse line\nlineData.changeAlignment data, 5\ndata\\commit!\n</code></pre>"},{"location":"AssfPlus/#inserttransformtags","title":"insertTransformTags","text":"<p>This inserts transform tags. Honestly this exists because I could not figure out how to insert transform tags natively.</p> Arguments Meaning Type Default Value data Assf Line Contents - - tags Table of Assf Tag Object table - t1 Start time of transform in miliseconds integer - t2 End time of transform in miliseconds integer - accel Accel of transform float - index Index of Assf section in which to insert transform tag integer 1 sectionPosition Position within an Assf section in which to insert transform tag integer - direct if true, considers all sections and attempts to insert in that section if that section is tag section. if false it only considers tag sections boolean false Returns nil <pre><code>AssfPlus.lineData.insertTransformTag data, {ASS\\createTag('alpha1', 0)},\n    0, 200, 0.5, 1, _, true\n</code></pre>"},{"location":"AssfPlus/#text-section","title":"Text Section","text":""},{"location":"AssfPlus/#gettags","title":"getTags","text":"<p>While you don't necessarily don't need <code>getTags</code> in a text section, I sometimes find myself needing to know which tags actually exists in the line rather than effective tags in the line. If you want to act on a tag, it's still better to use <code>getEffectiveTags</code> btw. This is for getting information on which tags exists in line for the current text section.</p> Arguments Meaning Type Default Value data Assf Line Contents - - section Assf text section - - listOnly if you only need list of tag names boolean false Returns Assf tagList if listOnly is false, list of tag's name if listOnly is true <pre><code>tags = textSection.getTags data, section\nif tags.fontname\n    -- do things here if \\fn exists in the line before this section\n</code></pre> <p>Get the list of tag names only</p> <pre><code>tags = textSection.getTags data, section, true\n</code></pre>"},{"location":"AssfPlus/#tag-section","title":"Tag Section","text":""},{"location":"AssfPlus/#replacetags","title":"replaceTags","text":"<p>Replace tags method does not exist for tag section.</p> Arguments Meaning Type section Assf Tag Section - tags Table of Assf Tag Objects - index Index at which to add the replaced tag Number Returns nil <p>Index can be -1 to add the tag at the end of the tag section. If the tag section contains reset tag, then the tags will automatically add it to the end of the tag section.</p> <pre><code>AssfPlus.tagSection.replaceTags section, {\n    ASS\\createTag(\"outline\", 0),\n    ASS\\createTag(\"shadow\", 0),\n    ASS\\createTag(\"alpha4\", 255),\n}, -1\n</code></pre>"},{"location":"AssfPlus/#tags","title":"Tags","text":""},{"location":"AssfPlus/#color","title":"Color","text":""},{"location":"AssfPlus/#extractcolor","title":"extractColor","text":"<p>Extract the R, G and B value of a color. The input can be the color string or a color object made by Assf.</p> Arguments Type color colorString or {r, g, b} or assf color tag Returns Type r, g, b Number <pre><code>r, g, b = _tag.color.extractColor \"&amp;H1010CF&amp;\"\nr, g, b = _tag.color.extractColor {73, 201, 37}\nr, g, b = _tag.color.extractColor {ASS\\createTag \"color1\", 73, 201, 37}\n</code></pre>"},{"location":"AssfPlus/#getdeltae","title":"getDeltaE","text":"<p>This will compare 2 colors to check how similar they are. The similarity is based on human perception. If delta E value is less than 1, then they appear the same for human eyes. If they're 1 - 2, then they need to be observed carefully to find difference.</p> Arguments Type color1 colorString or {r, g, b} or assf color tag color2 colorString or {r, g, b} or assf color tag Returns Type delta E value Number <pre><code>deltaEValue = _tag.color.getDeltaE \"&amp;H1010CF&amp;\", \"&amp;H1515A9&amp;\"\ndeltaEValue = _tag.color.getDeltaE {73, 201, 37}, {169, 21, 21}\ndeltaEValue = _tag.color.getDeltaE {ASS\\createTag \"color1\", 73, 201, 37}, {ASS\\createTag \"color1\", 169, 21, 21}\n</code></pre>"},{"location":"AssfPlus/#getxyz","title":"getXYZ","text":"<p>Converts RGB to XYZ. I needed to convert the color from RGB to XYZ to LAB for delta E calculation. That's the only reason why this exists.</p> Arguments Type color colorString or {r, g, b} or assf color tag Returns Type X, Y, Z Number <pre><code>X, Y, Z = _tag.color.getXYZ \"&amp;H1010CF&amp;\"\nX, Y, Z = _tag.color.getXYZ {73, 201, 37}\nX, Y, Z = _tag.color.getXYZ {ASS\\createTag \"color1\", 73, 201, 37}\n</code></pre>"},{"location":"AssfPlus/#getlab","title":"getLAB","text":"<p>Converts RGB to LAB.</p> Arguments Type color colorString or {r, g, b} or assf color tag Returns Type L, A, B Number <pre><code>L, A, B = _tag.color.getLAB \"&amp;H1010CF&amp;\"\nL, A, B = _tag.color.getLAB {73, 201, 37}\nL, A, B = _tag.color.getLAB {ASS\\createTag \"color1\", 73, 201, 37}\n</code></pre>"},{"location":"AssfPlus/#shapes","title":"Shapes","text":""},{"location":"AssfPlus/#pathfinder","title":"Pathfinder","text":"<p>This allows us to perform various boolean operations in shapes. This depends on ILL.</p> <p>This takes the shape1 and shape2, performs the boolean operation on them and then the resulting shape is saved on shape1.</p> <p>The different modes are \"Unite\", \"Intersect\", \"Difference\" and \"Exclude\"</p> Arguments Type mode string shape1 Assf Drawing Section or Assf Drawing shape2 Assf drawing Seciton or Assf Drawing or Assf rectangular clip or Assf vectorial clip Returns nil <pre><code>_shape.pathfinder \"Intersect\", shape1, shape2\n</code></pre>"},{"location":"AssfPlus/#utils","title":"Utils","text":"<p>These are some of the functions that are not necessarily related to assf.</p>"},{"location":"AssfPlus/#setoglineextradata","title":"setOgLineExtradata","text":"<p>This saves the original line in extradata so that the changes made by scripts can be reverted later on. The extradata name provided should be unique to that script.</p> Arguments Type line Aegsiub line or LineCollection line extradataName string Returns nil <pre><code>for line in *sel\n    _util.setOgLineExtradata line, \"a-mo\"\n</code></pre>"},{"location":"AssfPlus/#revertlines","title":"revertLines","text":"<p>This reverts the line if there is original line present in extradata saved using <code>setOgLineExtradata</code>.</p> Arguments Type sub subtitle table from Aegisub api sel selected line table from Aegisub api extradataName string Returns nil <pre><code>for line in *sel\n    _util.revertLines sub, sel, \"a-mo\"\n</code></pre>"},{"location":"AssfPlus/#windowerror","title":"windowError","text":"<p>This shows the message and exits the script</p> Arguments Type errorMessage string Returns nil <pre><code>_util.windowError \"This is an error message.\"\n</code></pre>"},{"location":"AssfPlus/#windowasserterror","title":"windowAssertError","text":"<p>This shows the message and exits the script if the condition is false.</p> Arguments Type condition boolean errorMessage string Returns nil <pre><code>_util.windowError a &gt; b, \"a was not greater than b unfortunately.\"\n</code></pre>"},{"location":"AssfPlus/#progress-reporting","title":"Progress Reporting","text":"<p>This shows a progress bar and counter as well as a title for the progress window.</p> Arguments Meaning Type title Title of the window string count current count integer total total count integer Returns nil <pre><code>Assf._util.progress \"Removing Lines\", 1, 100\n</code></pre>"},{"location":"AssfPlus/#check-cancellation","title":"Check Cancellation","text":"<p>This checks if user has cancelled the script and if they have then stops the further execution of the script.</p> Arguments nil Returns nil <pre><code>Assf._util.checkCancellation!\n</code></pre>"},{"location":"AssfPlus/#checkvideoisopen","title":"checkVideoIsOpen","text":"<p>This checks if a video is loaded or not in the current subtitle file.</p> Arguments nil Returns boolean true if video is open, boolean flase if video is not open <pre><code>if Assf._util.checkVideoIsOpen!\n    -- do something here if video is open\nelse\n    -- do something here if video is closed\n</code></pre>"},{"location":"AssfPlus/#getframerate","title":"getFramerate","text":"<p>The gets the framerate of the video that is open. The framerate is in frame per second. If the video is not open the framerate returned is 23.379 fps.</p> Arguments Meaning Default Value default_framerate Framerate returned if video is not open 23.379 Returns framerate in frame per second <pre><code>fps = Assf._util.getFramerate!\n</code></pre>"},{"location":"AssfPlus/#credits","title":"Credits","text":"<p>This module stands on the shoulders of giants that did most of the work.</p> <ul> <li>ASSFoundation (Obviously)</li> <li>Perspective by Arch (For things related to perspective)</li> <li>ILL (For things related to shapes)</li> <li>Yutils</li> <li>SubInspector</li> </ul>"},{"location":"Auto%20Fade/","title":"Auto Fade","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p><code>Auto Fade</code> allows you to determine the fade in and fade out time of a sign. Manually determining them requires you to step through frames of the video and find the frame where fade in ends or fade out starts and then add the fade tag to the line. This script automates all of those steps.</p> <p>Warning</p> <p>This script only works in arch1t3cht's Aegisub.</p>"},{"location":"Auto%20Fade/#usage","title":"Usage","text":""},{"location":"Auto%20Fade/#static-sign","title":"Static Sign","text":"Your browser does not support the video tag.  <ul> <li>Time your sign.</li> <li>Determine if your sign has fade in, fade out or both.</li> <li>Play the video until you reach any frame in which there is neither fade in nor fade out.</li> <li>Now you have two options. Either add a single point <code>clip/iclip</code> over the sign as shown in first example of the video or hover over the Japanese sign, right click and choose \"Copy coordinates to Clipboard\" as shown in the second example of video above.</li> <li>Open the script (while staying in the same video frame). The co-ordinate should have automatically be picked up and shown in the GUI. Then choose <code>Fade in</code> or <code>Fade out</code> or <code>Both</code> button depending on what you want.</li> <li>The script will automatically add appropriate fade to your text.</li> </ul>"},{"location":"Auto%20Fade/#moving-sign","title":"Moving Sign","text":"Your browser does not support the video tag.  <p>If your sign is moving and you also have motion tracking data for the sign, Available, you can use that data to determine the fade for such moving sign as well.</p> <p>All the steps are the same as shown above except before you click the button, paste the tracking data in the text box and change the drop-down from <code>Single Co-ordinate</code> to <code>Tracking Data</code>.</p>"},{"location":"Bidirectional%20Snapping/","title":"Bidirectional Snapping","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>Info</p> <p>If you use my <code>Timing Assistant</code> script, there is no need to use this script anymore.</p> <p>This script is made to be hotkeyed to allow you to snap to start or end of the the line to frame before or ahead respectively while timing. While there are other scripts that allow you snap to keyframes, they are either a simple snap to adjacent keyframes or a TPP style snapping scripts.</p> <p>While timing, you might have come across the case multiple times when you go to the next line only to realize that the end time of the line overshoots the keyframe you want to snap to. Then you have no choice but to snap backwards using mouse. Here's where this script comes handy. This script is made to be hotkeyed, so first hotkey the end snapping and the start snapping function in the audio section. When you press the hotkey to snap end once, it snaps to the keyframe ahead. If you press the same hotkey again, it snaps to the keyframe behind. Then every press of the hotkey will continue snapping to previous keyframe. This way, you can snap to the keyframe ahead or behind using the same hotkey. For the start time, the opposite happens. One press snaps behind, and then double press snaps forward.</p> <p>I use Bidirectional Snapping in combination with this script which is also hotkeyed and allows me to link the previous line to current line without moving to previous line.</p> <p>An attempt has been made below to showcase its usage, but you should use it yourself to see how it works. Here, <code>w</code> has been hotkeyed to end-snapping and <code>q</code> has been hotkeyed to beginning-snapping.</p>  Your browser does not support the video tag."},{"location":"Chromatic%20Abberation/","title":"Chromatic Abberation","text":"<p>Available in Dependency Control</p> <p>Source to script</p> <p>Link to script</p> <p>Chromatic Aberration is a stylistic effect that mimics the failure of a lens to properly focus all colors. The script <code>Chromatic Abberation</code> as the name suggests allows you to emulate that effect in your sign.</p> <p>Info</p> <p>The script is still new and the result might not be perfect. Don't hesiatate to report bugs and suggestions.</p>"},{"location":"Chromatic%20Abberation/#usage","title":"Usage","text":"<p>x Offset and y Offset allows you to increase the size of the effect.</p> <p>If you tick the checkbox <code>Keep Original Color</code>, the script will apply the effect but will not change the base color. If this is unticked, the base color will be whatever is the result of subtractive color mixing.</p> <p>The three colors will allow user to change the colors of the effect. There is no need to change it most of the time since this is the default colors of chromatic abberation but if the user wants to change it, they can.</p>"},{"location":"Chromatic%20Abberation/#simple-example","title":"Simple Example","text":"Your browser does not support the video tag."},{"location":"Chromatic%20Abberation/#keep-original-color-of-the-line","title":"Keep Original Color of the line","text":"Your browser does not support the video tag."},{"location":"Chromatic%20Abberation/#works-similarly-with-shape","title":"Works similarly with shape","text":"Your browser does not support the video tag."},{"location":"Edit%20Tags/","title":"Edit Tags","text":"<p>Available in Dependency Control</p> <p>Source to script</p> <p>Link to script</p>"},{"location":"Edit%20Tags/#introduction","title":"Introduction","text":"<p>Edit Tags is a script that, as the name suggests, allows you to edit tags in your line. If you are manually editing tags by going into the textbox, I believe you're doing it wrong. You are not only likely to create malformed tags if you're not careful enough, it is also hard to edit tags in a line that has a fairly complex set of tags. Imagine trying to find <code>frx</code> in the ocean of tags like this and this is not even the most complex line I can think of.</p> <p>{\\blur2\\c&amp;H6E5A66&amp;\\fscx35.2\\fscy33.44\\fax-0.29\\frz16.86\\pos(544,146)\\b1\\alpha&amp;HC0&amp;\\fry348}C{\\fscx35.27\\fscy33.49}h{\\fscx35.38\\fscy33.61}i{\\fscx35.51\\fscy33.74}n{\\fscx35.68\\fscy33.9}e{\\fscx35.88\\fscy34.09}s{\\fscx36.09\\fscy34.29}e{\\fscx36.32\\fscy34.51} {\\fscx36.56\\fscy34.74}F{\\fscx36.83\\fscy34.99}o{\\fscx37.11\\fscy35.25}o{\\fscx37.4\\fscy35.53}d <p>Many will notice the similarity of this script with another popular script HYDRA. It is true that there is a significant overlap between the features of these scripts. However, it is also true that both of these scripts do things that other script does not. Unlike HYDRA, this script only has one head and only does things related to editing complex lines. I personally use both when it makes sense to use it.</p>"},{"location":"Edit%20Tags/#single-line-mode","title":"Single Line Mode","text":"<p>If you only select a single line before running the script, this mode is run.</p>"},{"location":"Edit%20Tags/#example-1","title":"Example 1","text":"<p>Imagine you have the following line and you run the script.</p> <pre>\n{\\pos(628.65,140.47)\\fscx100\\fscy100\\bord2\\1c&amp;H1718C3&amp;\\blur1}This is a line\n\n<p>The GUI produced will look something like this:</p>\n<p></p>\n<p>Notice that the GUI is already pre-filled with some values. These values are the effective values of these tags in this line. You can also notice that the tags that are present in the line are ticked.</p>\n<p>Now you can do the following things:</p>\n<ol>\n<li>Change the values of ticked tags to modify the values of these tags.</li>\n<li>Tick the unticked tags to insert those tags in the line.</li>\n<li>Untick the ticked tags to remove those tags from the line.</li>\n</ol>"},{"location":"Edit%20Tags/#example-2","title":"Example 2","text":"<p>Now imagine you have the following line where you have two tag sections and two text sections.</p>\n<pre>\n{\\bord5\\blur0.8}First Section{\\fnKnorke\\bord2.72\\c&amp;H69594D&amp;}Second Section</pre>\n\n<p>Then the GUI produced will be something like this:</p>\n<p></p>\n<p>It looks just like before but there are two major difference:</p>\n<ol>\n<li>There is now a new drop-down in the bottom of the GUI that consists of all sections of the line.</li>\n<li>There is a new button called <code>Switch</code> that didn't exist before.</li>\n</ol>\n<p>You will also notice in the top-left of the GUI, <code>SECTION 1/2</code> indicates that first section of the two is currently selected. The ticked tags in the GUI also reflects the first tag section. Any changes you make in this GUI will also only apply to the first tag section.</p>\n<p>In the drop-down at the bottom, you will notice that the next section is already selected. If you press <code>Switch</code> button now, you will now switch to the next section.</p>\n<p></p>\n<p>The selected tags in this GUI also reflects the second tag block. The changes you made to the tags in the first tag section is not lost on switch. You can switch back and forth between sections, make changes to tags as you switch and when you finally click <code>Apply</code> button, the changes you made to each sections will apply to respective tag sections.</p>\n<p>You can select any section in the drop-down to switch directly to that section. You don't have to switch in chronological order. At this point, it should be clear to you how you can make granular change to any section in your line.</p>"},{"location":"Edit%20Tags/#example-3-transforms","title":"Example 3: Transforms","text":"<p>Here's a line with transforms</p>\n<pre>\n{\\bord1.98\\blur0.53\\t(0,200,\\bord0)\\t(200,500,\\blur25)}This is a line\n\n<p>If you open a line with transforms, then you'll see that your GUI will now have a new button called <code>Transform</code>.</p>\n<p></p>\n<p>If you press the button, you will be greeted with a new GUI.</p>\n<p></p>\n<p>You actually already know how to use this GUI because this is just a mini version of what we did earlier. The GUI only shows transformable tags but other than that the way you edit transforms is just similar to how you work with other tags. If there are multiple transforms, you can switch between those transforms using drop-down menu.</p>"},{"location":"Edit%20Tags/#multi-line-mode","title":"Multi-Line Mode","text":"<p>When you select multiple lines and run the script, this mode is run.</p>\n<p>This is similar to HYDRA. You tick the tags, change the value and click <code>Apply</code>. It will modify or insert those tags in all selected lines.</p>\n<p></p>\n<p>There is really nothing more to this mode other than this section:</p>\n<p></p>\n<p>Here you can select which tag section, layer or style and the tags will only apply to those selection only. By default, it will apply to start tag section, all layers and all styles.</p>"},{"location":"Edit%20Tags/#text-mode","title":"Text Mode","text":"<p>You must have seen a button called <code>Text Mode</code> in the images above. The text mode is simply a glorified <code>Find and Replace</code> page where you can make changes to multiple tags and apply it at once.</p>\n<p></p>\n<p>Tags are de-duplicated so if a tag has same value in multiple places, it will only show once in the GUI and if you change it, it will be changed in all places.</p>\n<p>To make a change, just edit the value in the text box for as many tags as you want and click <code>Modify</code>. If you want to delete a tag, simply delete the whole line and keep that line empty. (Do not remove the line.)</p>\n\n<p>Warning</p>\n<p>Text mode is a lawless zone. It give you more freedom but does not validate what changes you make. Garbage in, Garbage out. It's easy to create malformed tags if you're not careful.</p>"},{"location":"Edit%20Tags/#text-editing","title":"Text Editing","text":"<p>Even though this script is called <code>Edit Tags</code> and not <code>Edit Text</code>, you can in fact edit text of a section. Just modify the text in the text-box that is at the bottom of GUI and it'll be saved when you click <code>Apply</code>. This is not available in multi line mode.</p>"},{"location":"Edit%20Tags/#section-deletion","title":"Section Deletion","text":"<p>Did you notice there is a tick box beside tag section?</p>\n<p></p>\n<p>It's there for a reason. You can actually untick it to delete the whole tag section. If you untick a tag section and switch to another tag section and then you change your mind, you can actually switch back to this section and tick it again to avoid removal.</p>\n<p></p>\n<p>You can do the same for transform.</p>\n<p></p>\n<p>And for text as well.</p>"},{"location":"Edit%20Tags/#some-opinionated-decisions","title":"Some opinionated decisions","text":"<p>I've made some decisions that everybody may not agree with.</p>\n<ol>\n<li>Vectorial clips and karaoke tags are not included in the GUI. I think it makes more sense to edit them using Aegisub itself.</li>\n<li>Rectangular clips, move and complex fade are only shown in GUI if they are present in the line. This was mainly done because if they were shown by default, the GUI became uglier. This does mean that you can't create these tags using the script. I'm more likely to revert this if people want.</li>\n<li>Alpha is expressed in percentage where 0 means opaque and 100 means transparent. HYDRA offered a drop-down menu with few alpha values and you were forced to disliked that and now you'll have to use percentage.</li>\n</ol>"},{"location":"Extrapolate%20Tracking/","title":"Extrapolate Tracking","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>When you're motion-tracking a sign, and you cannot track the first or last few frames either because the sign moved out of the screen or it faded out, you can use this script to extrapolate the tracking for those lines.</p> <p>What this script does:</p> <ul> <li>Gathers position, scale and rotation data from selected lines</li> <li>Uses k-fold cross validation to find a proper degree of polynomial to fit the data (and some other fuckery when proper degree cannot be found.)</li> <li>Uses that degree to extrapolate the data</li> <li>Generates motion tracking data from the extrapolated data</li> <li>Uses Aegisub Motion internally to apply that motion tracking data</li> </ul>"},{"location":"Extrapolate%20Tracking/#screenshot","title":"Screenshot","text":""},{"location":"Extrapolate%20Tracking/#usage","title":"Usage","text":"<p>Requirements</p> <ul> <li>All selected lines must be 1 frame long.</li> <li>Selection must be consecutive and sorted by time.</li> <li>If lines are split in layers, run the script separately for each layer.</li> </ul> <ul> <li>Try your best to track using Mocha or Blender. It's better to get proper track for as many frames as you can.</li> <li>Apply the motion tracking data to the line. Delete the badly tracked lines in the beginning or end if necessary.</li> <li>Select all the lines and run the script.</li> <li>Choose if you want to extrapolate at start or end using the drop-down in GUI.</li> <li>Enter how many additional frames you want to extrapolate.</li> <li>Click on <code>Apply</code> button.</li> </ul>"},{"location":"Extrapolate%20Tracking/#examples","title":"Examples","text":"<p>Info</p> <p>The graph generated in the video is for demonstration and debuggin purposes only. It'll not pop up everytime you use script.</p>"},{"location":"Extrapolate%20Tracking/#extrapolation-of-linear-track","title":"Extrapolation of linear track","text":"Your browser does not support the video tag."},{"location":"Extrapolate%20Tracking/#extrapolation-of-non-linear-track","title":"Extrapolation of non-linear track","text":"Your browser does not support the video tag."},{"location":"Extrapolate%20Tracking/#extrapolation-of-circular-track","title":"Extrapolation of circular track","text":"<p>Warning</p> <p>In some cases like in the example shown below, when the line rotates about a single origin point, you should disable <code>Origin</code> in the gui for proper extrapolation.</p>  Your browser does not support the video tag."},{"location":"Fit%20Text%20in%20Clip/","title":"Fit Text in Clip","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p>  Your browser does not support the video tag.  <p>This script will fit the text in the current line inside the rectangular clip and try to make it justified.</p> <p>Warning</p> <p>This script uses Yutils to determine the width of the text. Therefore, the efficacy of this script entirely depends on whether Yutils can accurately determine the width of the text.</p>"},{"location":"Fit%20Text%20in%20Clip/#usage","title":"Usage","text":"<ul> <li>Add <code>\\an7</code> to the line.</li> <li>Move the line so that the top left corner of text is exactly where it should be.</li> <li>Draw a rectangular clip starting very close to top left corner of the text such that the width of the clip is equal to the length of the text you want to be fitted to.</li> <li>Run the script.</li> </ul>"},{"location":"Fold%20Operations/","title":"Fold Operations","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>If you use arch1t3cht's Aegisub,then it comes with a feature to visually group and collapse lines in the subtitle grid called folds.</p> <p>This script allows you to perform various operations on such folds.</p> <p>Info</p> <p>If you have only one line selected, this script will function on the fold surrounding that line. If you select multiple lines, then the script will operate on all the folds around all the selected lines. So in this way you can either operate on a single fold or multiple folds. You can operate on any fold if you select even a single line of that fold. You do not need to open a fold to operate on it, if it's closed.</p>"},{"location":"Fold%20Operations/#screenshots","title":"Screenshots","text":"<p>Fold Operations Menu:</p> <p></p> <p>Fold Operations GUI:</p> <p></p>"},{"location":"Fold%20Operations/#usage","title":"Usage","text":"<p>Before I explain the usage of this script, there are two popular ways I've noticed people use folds. One is to simply select all the lines and create folds and another is to add commented lines at the start and end of lines where the first line has name for the fold. If you use commented lines, go to the GUI of the script and tick <code>Comments around fold</code> under config before doing anything else.</p> Fold with commentsSame fold without comments <p></p> <p></p> <p>Tip</p> <p>I prefer to use comments around my fold since it is cleaner and instantly allows me to recognize the signs among the list of folds. This script has an operation that will allow you to easily create named folds with comments.</p>"},{"location":"Fold%20Operations/#operations","title":"Operations","text":""},{"location":"Fold%20Operations/#select-fold","title":"<code>Select Fold</code>","text":"<p>This selects all the lines in fold. If you want to, for example, run <code>ASSWipe</code> on all lines in a fold, use this to select all the lines and wipe.</p>"},{"location":"Fold%20Operations/#create-fold-around-selected-lines","title":"<code>Create Fold Around Selected Lines</code>","text":"<p>Select all the lines which you want to add to fold and run this. A GUI will prompt you to enter name for the fold. The script will then insert commented lines with name and create a fold with selected lines.</p> <p></p> <p>If the fold is nested, it will show you by the number of arrows before fold names.</p> <p></p>"},{"location":"Fold%20Operations/#comment-fold","title":"<code>Comment Fold</code>","text":"<p>This comments all the lines in fold. If a line was already commented before running this, the script remembers it.</p>"},{"location":"Fold%20Operations/#uncomment-fold","title":"<code>Uncomment Fold</code>","text":"<p>This uncomments all the lines in fold. If the script remembers that a line was commented before running <code>Comment Fold</code>, it does not uncomment them.</p>"},{"location":"Fold%20Operations/#toggle-comments-in-fold","title":"<code>Toggle Comments in Fold</code>","text":"<p>This toggles the comments inside the current fold. Any commented lines will become uncommented, and vice versa. If the fold was commented using <code>Comment Fold</code>, the state of the already commented folds is respected.</p>"},{"location":"Fold%20Operations/#comment-or-uncomment-fold","title":"<code>Comment or Uncomment Fold</code>","text":"<p>Comment the lines of fold if it contains any uncommented lines, otherwise uncomment it all.</p>"},{"location":"Fold%20Operations/#delete-fold","title":"<code>Delete Fold</code>","text":"<p>This deletes all the lines of fold.</p>"},{"location":"Fold%20Operations/#clear-fold","title":"<code>Clear Fold</code>","text":"<p>This removes the fold without removing the lines itself. If you use comments around the fold, it will remove that as well.</p>"},{"location":"Fold%20Operations/#copy-fold","title":"<code>Copy Fold</code>","text":"<p>This copies all the lines in fold along with it's fold state and styles to system clipboard.</p>"},{"location":"Fold%20Operations/#cut-fold","title":"<code>Cut Fold</code>","text":"<p>This copies all the lines in fold along with it's fold state and styles to system clipboard and deletes the fold.</p>"},{"location":"Fold%20Operations/#paste-fold","title":"<code>Paste Fold</code>","text":"<p>This pastes all the lines in that was copied or cut using this script. The fold copied from one Aegisub window can be pasted in the same or different Aegisub window.</p> <p>Info</p> <p>If the file in another Aegisub window does not have styles of copied lines, those styles will also be added to new file.</p>  Your browser does not support the video tag."},{"location":"KFX/","title":"KFX","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p>This script is designed to write or modify karaoke template lines for The0x539's KaraTemplater</p>  Your browser does not support the video tag."},{"location":"KFX/#buttons","title":"Buttons","text":"<ul> <li>Next: Proceed to next step</li> <li>Insert: Insert a new line above the current selected line</li> <li>Replace: Replace the current selected line</li> <li>Modify: Modify the template in the current selected line</li> </ul>"},{"location":"KFX/#first-window-line-marker","title":"First Window - Line Marker","text":"<p>The first window allows you to select line markers. You won't be able to proceed unless you select a line marker.</p>"},{"location":"KFX/#second-window-modifiers","title":"Second Window - Modifiers","text":"<p>The second window allows you to choose modifiers. This is not compulsory, and you can proceed without choosing anything. For modifiers that need extra arguments, you can type them in the textbox. The options are dynamic i.e. only the modifiers available for the chosen line markers are available for choosing.</p>"},{"location":"KFX/#third-window-effect","title":"Third Window - Effect","text":"<p>The third window allows you to write the actual effects. If you chose <code>code</code> line marker, a text box will appear where you can write your code. Variables can be written one variable per line. Function can be written as you write in your IDE. Indentation is purely visual and not necessary, but you can indent with tabs or spaces if you wish.</p> <p></p> <p>For any other line marker, a HYDRA type GUI will appear. Every box is a textbox so that you can write value, variables or function. If you don't find any option for what you want to write, the <code>Additional</code> option is for you.</p> <p>If you tick transform, this same GUI will be reloaded for you to write tags inside the transform section.</p> <p>In the bottom, there are boxes for the effect, actor and text. While these are for giving you information of current state of template line, you can edit it manually, and it will be saved.</p>"},{"location":"Quality%20Report/","title":"Quality Report","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>This script is designed to write and generate QC reports from Aegisub. If you wish to write QC reports using a media player, there is a program called mpvQC which is designed to do just that.</p> <p>The top row of the GUI consists of configurable sections like timing, typesetting etc. that you can tick to specify the type of note. If nothing is ticked, it's treated as a general note. Below that is a drop-down which has pre-made reports for each sections for making even faster notes.</p> <p>Below that is a textbox where you are free to write you report. The way you format your report in the textbox is preserved. If you selected any pre-made reports, it is appended to the beginning of the text in the text-box. You can leave this box empty and only select the pre-made report.</p> <p>Finally, there is a checkbox called <code>Use video frame</code>. Normally, the report is added to current line but if you tick this, the report is added on the basis of the current video frame. If the current video frame has a subtitle, then the report is added to that line. If there isn't, then an empty line with report is inserted whose time is same as the video frame.</p> <p>After you write all your notes, you can generate a report and a properly formatted note will with time will be generated that you can copy and share. The generated report is fully compatible with arch1t3cht's Note Browser script. After you generate the report, and you no longer need them in your subtitle, you can clean them up too.</p> <p></p> <p>There is also a config where you can configure a lot of things about the script so be sure to check that out.</p>"},{"location":"Remove%20Tags/","title":"Remove Tags","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>This script deals with all things related to removing tags from the line. One of the main motivation for writing this script when a script like unanimated's <code>Script Cleanup</code> exists is because I would spend a lot of time searching the exact tag I wanted to remove from the 40 options of the GUI. When I have only 10 tags, I wanted to choose the tags I want to remove from those 10 tags only. So, GUI of this script is dynamically generated i.e. only tags that are available in the selected lines are available for you to remove. The GUI from the image above is not what you'll see when you run it.</p>"},{"location":"Remove%20Tags/#remove-all-button","title":"<code>Remove All</code> button","text":"<ul> <li>If you simply click the <code>Remove All</code> button, it removes all the tags form the selected lines.</li> <li>If you check <code>Start Tags</code> in the top row and then press <code>Remove All</code> button, it removes all start tags from selected lines.</li> <li>Similarly, checking <code>Inline Tags</code> in top row removes all inline tags.</li> </ul>"},{"location":"Remove%20Tags/#remove-tags-button","title":"<code>Remove Tags</code> button","text":"<ul> <li>All the tags that you individually tick would be removed.</li> <li>If <code>Start tags</code> is checked, the selected tags will only be removed from start tags.</li> <li>If <code>Inline tags</code> is checked, the selected tags will only be removed from inline tags.</li> <li>If <code>Transform</code> is checked, the selected tags will only be removed from transforms.</li> <li>If <code>Inverse</code> is checked, all the tags except the selected ones will be deleted.</li> </ul>"},{"location":"Remove%20Tags/#remove-group-button","title":"<code>Remove Group</code> button","text":"<p>This button executes the things you select in the left column and is mostly used to delete groups of tags at once. Staying true to it's mission, the script also dynamically creates this section. Which means that if your selection does not contain any color tags for example, the option to remove color tags won't be available. You can also tick <code>Start Tag</code> or <code>Inline Tag</code> the top row and only remove the tag group from start tag block or inline tag block only. The groups available are:</p> <ul> <li>All color tags (c, 1c, 2c, 3c, 4c)</li> <li>All alpha tags (alpha, 1a, 2a, 3a, 4a)</li> <li>All rotation tags (frz, frx, fry)</li> <li>All scale tags (fs, fscx, fscy)</li> <li>All perspective tags (frz, frx, fry, fax, fay, org)</li> <li>All inline tags except last (useful for undoing gradient)</li> </ul>"},{"location":"Rotated%20Gradient/","title":"Rotated Gradient","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p></p> <p><code>Rotated Gradient</code> allows you to create a gradient at an angle using clips. Traditionally, to create a rotated gradient, you'd have to create a small strip of shapes. That would make it impossible to edit the sign afterwards.</p>"},{"location":"Rotated%20Gradient/#usage","title":"Usage","text":"Your browser does not support the video tag.  <ul> <li> <p>Ready the text or shape which you want to gradient.</p> </li> <li> <p>Duplicate the line and change tags in the duplicated line.</p> </li> </ul> <p>Info</p> <p>You can duplicate it twice to have 2 stop gradient. This basically means duplicate the line <code>n</code> times to create <code>n</code> stop gradient</p> <ul> <li> <p>Draw 3 point vectorial clip in clockwise direction in any of the line. The first two points determines the direction of gradient and the last point determines the distance upto which the gradient must continue.</p> </li> <li> <p>Run the script. In the GUI, select the pixel for each line, accel and tick all the tags you want to gradient.</p> </li> </ul> <p>Warning</p> <p>If your text has border and shadow, you must split the lines into layers with and without border and then depending on if you want to gradient fill or border and shadow, run the script in that layer. Otherwise, you may see strips in you line. This is not a limitation of this script. This is limitation of ASS rendering.</p>"},{"location":"Timing%20Assistant/","title":"Timing Assistant","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>When I time, I always make a series of decision for every line. Do I need to add lead in, lead out, snap to keyframes or link the lines? So I wanted to create a script that allows me to do it in a press of a hotkey. You might be thinking, \"Phos, you just made a TPP\". I can assure you it's not. The workflow of using this script is the same as timing without TPP, but only difference is that the aforementioned decisions is made for you by the script.</p>"},{"location":"Timing%20Assistant/#usage","title":"Usage","text":"<p>The first thing to do after you install the script is to assign a hotkey for the script in Aegisub. When you do add a hotkey, make sure you add it in the Audio section.</p> <p>In order to time a line, you first exact time a line (subtitle starts and ends exactly with audio) and then press the hotkey. The script will make the decision for you whether it should add lead in, snap to keyframe, link the lines together or add lead out. You then move to the next line by pressing <code>g</code> and repeat. Exact time, hotkey. Exact time, hotkey. That's it.</p> <p>Info</p> <p>If the end time of your line exceeds the audio of next line, don't fix it. Go to the next line, exact time it and then press the hotkey. The script will fix it. It works in this manner because it can only make proper decision of line linking of current line in context of start time of next line.</p> <p>If you want to check exactly what steps the script takes for decision-making, expand the following and let me know if I got something wrong.</p> Click here to expand <p>For start time:</p> <ol> <li>If start time is already snapped to keyframe, it does not make any changes to the start time.</li> <li>Checks if there is a keyframe within the time specified in the config and snaps to it.</li> <li>If it was not snapped, it checks the end time of previous line. If it is within the linking time specified in config and not snapped to keyframe, it adds lead in to current line and extends the end time of the previous line.</li> <li>If it was neither snapped nor linked, it simply adds lead in.</li> </ol> <p>For end time:</p> <ol> <li>If end time is already snapped to keyframe, it does not make any changes to the end time.</li> <li>Here's a special step that is only applicable when your keyframe snapping value is greater than 850 ms. Snapping to keyframes more than 850 ms away is not always the correct thing to do, hence this special step. If the script finds that there is a keyframe 850+ ms away from exact end, and you've allowed to snap to that distance in config, then it first checks cps of the line (without leadout). If cps is greater than 15, then it snaps to keyframe. If the cps is less than 15, then it either tries to add lead out to the line or extend the end time such that it is 500 ms away from keyframe whichever is lesser.</li> <li>If above special case is not true(which is most of the case), it simply checks if there is a keyframe within time specified in the config and snaps to it.</li> <li>If it did not snap, it simply adds lead out to the line.</li> </ol>"},{"location":"Timing%20Assistant/#config","title":"Config","text":"<p>When you use the script for the first time, it uses values that I consider sane defaults. You are however free to change it and the script will perform as intended as long as the values you put are within reason.</p>"},{"location":"Timing%20Assistant/#creating-a-new-preset","title":"Creating a new preset","text":"<p>Creating a new preset is as easy as changing the values in the GUI and hitting the <code>Create Preset</code> button.</p> <p></p> <p>You will then be asked the name of the preset. If you want to use the preset as soon as you create it, tick on <code>Set as Current Preset</code>.</p>"},{"location":"Timing%20Assistant/#actions-on-preset","title":"Actions on preset","text":"<p>Once you have a preset, you might want to perform some actions on them. First select the preset you want to act on in the left dropdown. Then select the action you want to perform on it in the right dropdown. Then finally click on <code>Modify Preset</code> button.</p>"},{"location":"Timing%20Assistant/#load","title":"Load","text":"<p>This just loads the values of that preset in the GUI.</p>"},{"location":"Timing%20Assistant/#modify","title":"Modify","text":"<p>This modifies the preset with the values that is currently in the GUI.</p>"},{"location":"Timing%20Assistant/#delete","title":"Delete","text":"<p>This deletes the preset. Default preset cannot be deleted.</p>"},{"location":"Timing%20Assistant/#rename","title":"Rename","text":"<p>This renames the preset.</p>"},{"location":"Timing%20Assistant/#set-current","title":"Set Current","text":"<p>This sets the preset and the current preset and its value will be used whenever you press the hotkey.</p>"},{"location":"Vector%20Gradient/","title":"Vector Gradient","text":"<p>Not Available in Dependency Control</p> <p>Link to script</p> <p>The original idea for using vector shapes to create gradient was shared by Noroino Hanakao . This script only automates this process.</p> <p>The main idea is that this script creates shapes that when blurred gives you a gradient. The main benefit of using this over clip gradient is that this can create gradient in one line which makes it easier to motion track and manipulate.</p>"},{"location":"Vector%20Gradient/#usage","title":"Usage","text":"Your browser does not support the video tag.  Name Number of clip points Gradient type Wedge 3 Linear Ring 2 Radial Star 2 Radial <ul> <li> <p>Create the vectorial clip with the required number of clips. For wedge, create the clip in clockwise direction.</p> </li> <li> <p>Run the script and choose which type of gradient you want.</p> </li> </ul>"},{"location":"Vector%20Gradient/#examples","title":"Examples","text":"<p>Example 1:</p> Rectangular mask gradientSame mask without blur <p></p> <p></p> <p>Example 2:</p> Text gradientSame text without blur <p></p> <p></p>"},{"location":"Wave/","title":"Wave","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p></p> <p>Wave is a script that allows you to mimic the wavy signs through some fscx, fscy and fsp trickery. When you open the scripts, there are few parameters you can change, and you'll have to go through some trial and error to determine what values give you the result you want.</p> <p>Credits for the original code excerpt before my modification goes to The0x539</p> <p>Below are few examples of what kind of waves you can achieve but depending on the values you use, you can create different types of waves as well.</p>  Your browser does not support the video tag."},{"location":"Wobble/","title":"Wobble","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>Wobble is a remake of a very old script that distorts the text with the parameters you choose. The old script however was very difficult to use. It neither recognized the text already present in the line nor the tags used nor did it output the result in a usable format. So I decided to remake it and add other features.</p> <p></p> <p>When you open the script, you will be presented with the GUI as shown above. Imagine that when you use this script, it distorts the text along a wave horizontally or vertically or both. The parameters control the nature of the wave thus controls how the text is distorted. Frequency is the number of waves (crest and trough) you want in the text in percentage. You'll most likely use 20-40% for optimum results. Strength is the number of pixels that the text will be distorted to. With trial and error, you can create many interesting distortions.</p> <p>As you can see below, the top is the original font and everything below it is distorted using this script. I use it when the sign is distorted or I need an irregular font that I cannot find.</p> <p></p> <p></p>"},{"location":"Wobble/#animate-the-distortion","title":"Animate the distortion","text":"<p>If you want to animate the distortion, first split the line to frames. You can use something like petzku's script to do so. You can control the speed of animation by controlling the number of frames each line has. The more frames per line, the slower the animation. After splitting the line to frames, you need to put the starting value and ending value. I recommend you figure this out beforehand by using main GUI. After you put the starting and ending value for all the required elements, click on <code>Animate</code> and the script will handle the rest.</p> Click here to see example animations  Your browser does not support the video tag.   Your browser does not support the video tag.  <p></p>"},{"location":"svg2ass/","title":"svg2ass","text":"<p>Available in Dependency Control</p> <p>Link to script</p> <p>The script svg2ass is a wrapper for a program svg2ass which allows you to select an SVG file from Aegisub itself and convert it to shape, clip or iclip. It works in both windows and Unix operating system. I generally create SVG files using GIMP(can perform complex selections and convert those selections to SVG in a matter of seconds) or Inkscape and use svg2ass to convert them to subtitle lines.</p> <p>Info</p> <p>If you cannot/do not want to compile svg2ass, there is also a website where you can upload the SVG file to obtain the output.</p> <p>The first thing you should do is to set the config and provide the path where you have the svg2ass executable. At the same time, you can also provide custom tags you want to append to final result and the custom svg2ass parameters if you prefer.</p> <p></p> <p>To use this script, simply click on <code>Import</code> button and select the SVG file. The resulting lines will have the same start time, end time and style as the selected line. If you checked clip or iclip in the GUI, the resulting shape will be converted to clip or iclip respectively. Alternatively if you don't have the svg2ass executable, you can get the output of svg2ass from the website and paste the result in the textbox and click on the <code>Textbox</code> button. The resulting lines will the same as <code>Import</code>.</p> <p></p>"}]}